import os
from aiogram.filters import BaseFilter
from aiogram.types import Message
from typing import Union
from aiogram import Bot
from dotenv import load_dotenv

load_dotenv()

ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

class ChatTypeFilter(BaseFilter):
    def __init__(self, chat_types: Union[str, list[str]]):
        """–§–∏–ª—å—Ç—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞.

        Args:
            chat_types (Union[str, list[str]]): –¢–∏–ø—ã —á–∞—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "private") –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤.

        Returns:
            bool: True, –µ—Å–ª–∏ —Ç–∏–ø —á–∞—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False.
        """
        self.chat_types = [chat_types] if isinstance(chat_types, str) else chat_types

    async def __call__(self, message: Message) -> bool:
        return message.chat.type in self.chat_types


class IsGroupAdmin(BaseFilter):
    def __init__(self, admin_chat_id: int, show_message: bool = True):
        self.admin_chat_id = admin_chat_id
        self.show_message = show_message  # –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

    async def __call__(self, message: Message, bot: Bot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã.

        Args:
            message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤.

        Returns:
            bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–Ω–∞—á–µ False.

        Notes:
            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ show_message=True.
        """
        if message.chat.type == "private":
            try:
                member = await bot.get_chat_member(self.admin_chat_id, message.from_user.id)
                if member.status not in ["creator", "administrator"]:
                    if self.show_message:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–ª–∞–≥ True
                        await message.answer("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
                    return False
                return True
            except Exception as e:
                if self.show_message:
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                return False
        return False
