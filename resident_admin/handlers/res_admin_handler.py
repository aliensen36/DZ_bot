import logging


from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message
from resident_admin.handlers.utils.point_transactions import accrue_points, deduct_points
from resident_admin.keyboards.res_admin_reply import res_admin_keyboard
from utils.filters import ChatTypeFilter, IsGroupAdmin, ADMIN_CHAT_ID, RESIDENT_ADMIN_CHAT_ID
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)


res_admin_router = Router()
res_admin_router.message.filter(
    ChatTypeFilter("private"),
    IsGroupAdmin([RESIDENT_ADMIN_CHAT_ID], show_message=False)
)

class TransactionFSM(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–æ–Ω—É—Å–æ–≤.

    States:
        price: —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏.
        card_id: id –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.
        transaction_type: —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        resident_id: id —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
    """
    price = State()
    card_id = State()
    transaction_type = State()
    resident_tg_id = State()
    
    
@res_admin_router.message(Command("res_admin"))
async def resident_admin_panel(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
                         reply_markup=res_admin_keyboard())
    
@res_admin_router.message(F.text == 'üéÅ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã')
async def cmd_add_points(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏:')
    await state.set_state(TransactionFSM.price)
    await state.update_data(transaction_type='–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ')
    
@res_admin_router.message(F.text == 'üí∏ –°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã')
async def cmd_deduct_points(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (‚ÇΩ):')
    await state.set_state(TransactionFSM.price)
    await state.update_data(transaction_type='—Å–ø–∏—Å–∞–Ω–∏–µ')

    
@res_admin_router.message(TransactionFSM.price)
async def get_price_points(message: Message, state: FSMContext):
    message_text = message.text
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        return

    await state.update_data(price = message_text)
    await message.answer('–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏')
    await state.set_state(TransactionFSM.card_id)

@res_admin_router.message(TransactionFSM.card_id)
async def get_card_id(message: Message, state: FSMContext):
    message_text = message.text
    import re
    CARD_RE = re.compile(r"^\d{3}-\d{3}-\d{3}-\d{3}$")
    if not CARD_RE.fullmatch(message.text):
        await message.answer("–§–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã: xxx-xxx-xxx-xxx")
        return

    await state.update_data(card_id=message.text, resident_tg_id=message.from_user.id)
    data = await state.get_data()
    try:
        if data['transaction_type'] == '–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ':
            result = await accrue_points(
                price=int(data["price"]),
                card_id=data["card_id"],
                resident_tg_id=data["resident_tg_id"],
            )
            await message.answer(f"‚úÖ –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã")
        else:  # —Å–ø–∏—Å–∞–Ω–∏–µ
            result = await deduct_points(
                price=int(data["price"]),
                card_id=data["card_id"],
                resident_tg_id=data["resident_tg_id"],
            )
            await message.answer(f"‚úÖ –ë–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω—ã")
    except ValueError as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –û—à–∏–±–∫–∞\n{e}")
    await state.clear()

    