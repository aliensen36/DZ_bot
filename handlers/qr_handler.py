from io import BytesIO

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from PIL import Image
from pyzbar.pyzbar import decode

router = Router()

class QRScanState(StatesGroup):
    waiting_for_image = State()

# 1) –ö–æ–º–∞–Ω–¥–∞ /scanqr
@router.message(Command("scanqr"))
async def cmd_start_qr_scan(message: Message, state: FSMContext):
    await state.set_state(QRScanState.waiting_for_image)
    await message.answer("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º.")

# 2) –ù–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏ —Å callback_data="scanqr"
@router.callback_query(F.data == "scanqr")
async def qr_scan_callback(query: CallbackQuery, state: FSMContext):
    await query.answer()  # —Å–Ω–∏–º–∞–µ–º ¬´—á–∞—Å–∏–∫¬ª –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await state.set_state(QRScanState.waiting_for_image)
    await query.message.answer("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º.")

# 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ, –∫–æ–≥–¥–∞ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_image
@router.message(QRScanState.waiting_for_image, F.photo)
async def handle_qr_photo(message: Message, state: FSMContext):
    buffer = BytesIO()
    file_id = message.photo[-1].file_id
    await message.bot.download(file_id, destination=buffer)
    buffer.seek(0)

    img = Image.open(buffer)
    decoded_objs = decode(img)

    if not decoded_objs:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ QR-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    else:
        qr_data = decoded_objs[0].data.decode('utf-8')
        await message.answer(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: <code>{qr_data}</code>")

    await state.clear()

# 4) –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –ø—Ä–∏—à—ë–ª –Ω–µ-photo
@router.message(QRScanState.waiting_for_image, ~F.photo)
async def handle_not_photo(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ) —Å QR-–∫–æ–¥–æ–º.")