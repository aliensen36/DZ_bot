import logging
import aiohttp
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiohttp import ClientError, ClientConnectorError, ServerTimeoutError, ContentTypeError
import asyncio
from data.url import url_users
from keyboards.reply import main_kb

logger = logging.getLogger(__name__)

start_router = Router()


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    user_data = {
        "tg_id": message.from_user.id,
        "first_name": message.from_user.first_name or "",
        "last_name": message.from_user.last_name or "",
        "username": message.from_user.username or "",
        "is_bot": message.from_user.is_bot,
    }

    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            try:
                async with session.post(url_users, json=user_data) as resp:
                    response_data = await resp.json()

                    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (200 –∏–ª–∏ 201)
                    if resp.status in (200, 201):
                        greeting_name = response_data.get('first_name', message.from_user.first_name)

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                        if resp.status == 201:
                            greeting_text = "–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! ü§ñüí´"
                        else:  # 200
                            greeting_text = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! ü§ó"

                        await message.answer(
                            f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{greeting_name}</b>! ‚ú®\n\n"
                            f"{greeting_text}",
                            reply_markup=main_kb
                        )

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                    else:
                        error_msg = response_data.get('detail', '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                        logger.error(f"API error {resp.status}: {error_msg}")
                        await message.answer(
                            f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n"
                            f"‚ö†Ô∏è {error_msg}\n\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                        )

            except ServerTimeoutError:
                logger.error("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
                await message.answer(
                    f"‚è≥ <b>{message.from_user.first_name}</b>, —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )

            except ClientConnectorError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
                await message.answer(
                    f"üîå <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏</b>\n\n"
                    f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.\n\n"
                    "üõ†Ô∏è –ú—ã —É–∂–µ —Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É!\n"
                    "üïí –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15-20 –º–∏–Ω—É—Ç."
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                await message.answer(
                    f"üåÄ <b>–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                    f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n\n"
                    "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º."
                )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer(
            f"üëã <b>{message.from_user.first_name}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.",
            reply_markup=main_kb
        )