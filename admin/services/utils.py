import aiohttp
from aiogram.types import InlineKeyboardMarkup

from data.config import config_settings
from data.url import url_category, url_resident
from typing import Optional

import logging
logger = logging.getLogger(__name__)



# =================================================================================================
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
# =================================================================================================


async def fetch_categories(tree: bool = False) -> list[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ API"""
    async with aiohttp.ClientSession() as session:
        async with session.get(
                f"{url_category}?tree={'true' if tree else 'false'}",
                headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
        ) as response:
            response.raise_for_status()
            return await response.json()


async def create_category(name: str, parent_id: Optional[int] = None) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API"""
    async with aiohttp.ClientSession() as session:
        data = {"name": name}
        if parent_id:
            data["parent"] = parent_id

        async with session.post(
                url_category,
                headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()},
                json=data
        ) as response:
            response.raise_for_status()
            return await response.json()


async def delete_category(category_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API"""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.delete(
                f"{url_category}{category_id}/",
                headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
            ) as response:
                if response.status == 404:
                    logger.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                response.raise_for_status()
                return response.status == 204
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}: {str(e)}")
            return False


async def format_categories_list(categories: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ"""
    if not categories:
        return "üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç."

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    subcategory_ids = set()

    def collect_child_ids(cat):
        for child in cat.get('children', []):
            subcategory_ids.add(child['id'])
            collect_child_ids(child)

    for cat in categories:
        collect_child_ids(cat)

    def format_category(cat, level=0):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–º –≤—ã–≤–æ–¥–µ
        if level == 0 and cat['id'] in subcategory_ids:
            return ""

        if level == 0:
            prefix = "\n\n" if not cat.get('is_first', False) else ""
            name = f"<b>{cat['name']}</b>"
        else:
            prefix = "    " * level
            name = f" - {cat['name']}"

        children = "\n".join([format_category(child, level + 1) for child in cat.get('children', [])])
        return f"{prefix}{name}{f'\n{children}' if children else ''}"

    if categories:
        categories[0]['is_first'] = True

    categories_list = "".join([format_category(cat) for cat in categories])
    return f"üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤</b>\n\n{categories_list.strip()}"


async def show_categories_message(chat_id: int, bot, reply_markup: Optional[InlineKeyboardMarkup] = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ"""
    categories = await fetch_categories(tree=True)
    text = await format_categories_list(categories)
    await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=reply_markup
    )


# =================================================================================================
#
# =================================================================================================







# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
async def create_new_resident(name: str, category_id: str, description: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –≤ DRF API.

    Args:
        name: –ò–º—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ)
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞

    Returns:
        dict or None: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    url = f"{url_resident}"
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    payload = {
        "name": name,
        "category_ids": [int(category_id)],  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ ID
        "description": description
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as response:
                print(f"Create resident status: {response.status}")
                print(f"Payload sent: {payload}")  # –û—Ç–ª–∞–¥–∫–∞
                if response.status == 201:
                    return await response.json()
                else:
                    print(f"Error creating resident: {await response.text()}")
    except aiohttp.ClientError as e:
        print(f"HTTP Client Error creating resident: {e}")
    except Exception as e:
        print(f"Unexpected error creating resident: {e}")
    return None
