import aiohttp
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.config import config_settings
from data.url import url_category, url_resident
from typing import Optional

import logging
logger = logging.getLogger(__name__)



# =================================================================================================
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
# =================================================================================================


async def fetch_categories(tree: bool = False) -> list[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ API"""
    async with aiohttp.ClientSession() as session:
        async with session.get(
                f"{url_category}?tree={'true' if tree else 'false'}",
                headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
        ) as response:
            response.raise_for_status()
            return await response.json()


async def create_category(name: str, parent_id: Optional[int] = None) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API"""
    async with aiohttp.ClientSession() as session:
        data = {"name": name}
        if parent_id:
            data["parent"] = parent_id

        async with session.post(
                url_category,
                headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()},
                json=data
        ) as response:
            response.raise_for_status()
            return await response.json()


async def delete_category(category_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API"""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.delete(
                f"{url_category}{category_id}/",
                headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
            ) as response:
                if response.status == 404:
                    logger.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                response.raise_for_status()
                return response.status == 204
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}: {str(e)}")
            return False


async def format_categories_list(categories: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ"""
    if not categories:
        return "üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç."

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    subcategory_ids = set()

    def collect_child_ids(cat):
        for child in cat.get('children', []):
            subcategory_ids.add(child['id'])
            collect_child_ids(child)

    for cat in categories:
        collect_child_ids(cat)

    def format_category(cat, level=0):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–º –≤—ã–≤–æ–¥–µ
        if level == 0 and cat['id'] in subcategory_ids:
            return ""

        if level == 0:
            prefix = "\n\n" if not cat.get('is_first', False) else ""
            name = f"<b>{cat['name']}</b>"
        else:
            prefix = "    " * level
            name = f" - {cat['name']}"

        children = "\n".join([format_category(child, level + 1) for child in cat.get('children', [])])
        return f"{prefix}{name}{f'\n{children}' if children else ''}"

    if categories:
        categories[0]['is_first'] = True

    categories_list = "".join([format_category(cat) for cat in categories])
    return f"üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤</b>\n\n{categories_list.strip()}"


async def show_categories_message(chat_id: int, bot, reply_markup: Optional[InlineKeyboardMarkup] = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ"""
    categories = await fetch_categories(tree=True)
    text = await format_categories_list(categories)
    await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=reply_markup
    )


# =================================================================================================
# –†–µ–∑–∏–¥–µ–Ω—Ç—ã
# =================================================================================================


async def fetch_categories_with_keyboard(tree: bool = True, cancel_callback: str = "residents_list") -> tuple[
    list[dict], InlineKeyboardMarkup]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç—Ä–æ–∏—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(
                    f"{url_category}?tree={'true' if tree else 'false'}",
                    headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {error_text}")

                categories = await response.json()
                builder = InlineKeyboardBuilder()

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
                subcategory_ids = set()

                def collect_child_ids(cat):
                    for child in cat.get('children', []):
                        subcategory_ids.add(child['id'])
                        collect_child_ids(child)

                for cat in categories:
                    collect_child_ids(cat)

                def add_category_buttons(cats, level=0):
                    for cat in cats:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
                        if level == 0 and cat['id'] in subcategory_ids:
                            continue

                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
                        btn_text = "    " * level + ("- –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:  " if level > 0 else "") + cat['name']
                        builder.row(InlineKeyboardButton(
                            text=btn_text,
                            callback_data=f"select_category_{cat['id']}"
                        ))

                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if cat.get('children'):
                            add_category_buttons(cat['children'], level + 1)

                add_category_buttons(categories)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
                builder.row(InlineKeyboardButton(
                    text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
                    callback_data=cancel_callback
                ))

                return categories, builder.as_markup()

        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")


async def create_resident_api(resident_data: dict) -> tuple[bool, str]:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                url_resident,
                json=resident_data,
                headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
            ) as response:
                if response.status == 201:
                    return True, "‚úÖ –†–µ–∑–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
                else:
                    error_text = await response.text()
                    return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {error_text}"
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"


async def fetch_residents_list() -> tuple[list[dict] | None, str | None]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ API
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Å–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤, None) –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏–ª–∏ (None, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ) –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(
                url_resident,
                headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
            ) as response:
                if response.status == 200:
                    return await response.json(), None
                else:
                    error_text = await response.text()
                    return None, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_text}"
        except Exception as e:
            return None, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"


async def update_resident_category_api(resident_id: int, category_id: int) -> tuple[bool, str]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API

    Args:
        resident_id: ID —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
        category_id: ID –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    async with aiohttp.ClientSession() as session:
        try:
            async with session.patch(
                    f"{url_resident}{resident_id}/",
                    json={"category_ids": [category_id]},
                    headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
            ) as response:
                if response.status == 200:
                    return True, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
                error_text = await response.text()
                return False, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {error_text}"
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"


async def update_resident_field_api(
        resident_id: int,
        field: str,
        value: str | int,
        headers: dict
) -> tuple[bool, str]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API

    Args:
        resident_id: ID —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
        field: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
        headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞

    Returns:
        tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    update_data = {field: value}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.patch(
                    f"{url_resident}{resident_id}/",
                    json=update_data,
                    headers=headers
            ) as response:
                if response.status == 200:
                    return True, f"‚úÖ –ü–æ–ª–µ {field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
                error_text = await response.text()
                return False, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {error_text}"
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"


async def fetch_residents_for_deletion() -> tuple[list[dict] | None, str | None]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ API

    Returns:
        tuple: (—Å–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤, None) –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏–ª–∏ (None, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ) –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(
                    url_resident,
                    headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
            ) as response:
                if response.status == 200:
                    return await response.json(), None
                error_text = await response.text()
                return None, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_text}"
        except Exception as e:
            return None, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"


async def delete_resident_api(resident_id: str) -> tuple[bool, str]:
    """
    –£–¥–∞–ª—è–µ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API

    Args:
        resident_id: ID —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    Returns:
        tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    async with aiohttp.ClientSession() as session:
        try:
            async with session.delete(
                    f"{url_resident}{resident_id}/",
                    headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
            ) as response:
                if response.status == 204:
                    return True, "‚úÖ –†–µ–∑–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                error_text = await response.text()
                return False, f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {error_text}"
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"


