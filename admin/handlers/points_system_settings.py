import aiohttp
import logging
from datetime import datetime
from pydantic import ValidationError
from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from data.config import config_settings
from admin.keyboards.admin_reply import admin_keyboard, points_system_settings_keyboard, cancel_keyboard, edit_points_system_settings_keyboard
from data.url import url_points_settings
from utils.filters import ChatTypeFilter, IsGroupAdmin, ADMIN_CHAT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

admin_points_settings_router = Router()
admin_points_settings_router.message.filter(
    ChatTypeFilter("private"),
    IsGroupAdmin([ADMIN_CHAT_ID], show_message=False)
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PointsSystemSettingsStates(StatesGroup):
    waiting_for_points_per_100_rubles = State()
    waiting_for_points_per_1_percent = State()
    waiting_for_new_user_points = State()

class EditPointsSystemSettingsStates(StatesGroup):
    choosing_field = State()
    waiting_for_points_per_100_rubles = State()
    waiting_for_points_per_1_percent = State()
    waiting_for_new_user_points = State()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async def get_points_system_settings():
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(f"{url_points_settings}single/", headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data
                logger.error(f"Failed to fetch settings, status={resp.status}")
                return []
    except aiohttp.ClientError as e:
        logger.error(f"Error fetching settings: {e}")
        return []

async def update_points_system_settings(settings_id: int, updated_fields: dict):
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.patch(
                f"{url_points_settings}{settings_id}/",
                json=updated_fields,
                headers=headers
            ) as resp:
                if resp.status == 200:
                    return True
                logger.error(f"Failed to update points system settings, status={resp.status}, response={await resp.text()}")
                return False
    except aiohttp.ClientError as e:
        logger.error(f"Error updating points system settings: {e}")
        return False

async def create_points_system_settings(settings_data: dict):
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.post(f"{url_points_settings}", json=settings_data, headers=headers) as resp:
                if resp.status == 201:
                    return True
                logger.error(f"Failed to create points system settings, status={resp.status}")
                return False
    except aiohttp.ClientError as e:
        logger.error(f"Error creating points system settings: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∏ –æ—Ç–º–µ–Ω—ã
@admin_points_settings_router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_admin_menu(message: Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=admin_keyboard(),
        parse_mode=None
    )

@admin_points_settings_router.message(F.text == "–û—Ç–º–µ–Ω–∞", StateFilter(PointsSystemSettingsStates, EditPointsSystemSettingsStates))
async def cancel_promotion_action(message: Message, state: FSMContext):
    logger.debug(f"Cancel action requested by user {message.from_user.id} in state {await state.get_state()}")
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=points_system_settings_keyboard(),
        parse_mode=None
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
@admin_points_settings_router.message(F.text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
async def points_system_settings_menu(message: Message, state: FSMContext):
    settings = await get_points_system_settings()

    if not settings:
        await message.answer(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ 100 —Ä.:",
            reply_markup=cancel_keyboard(),
            parse_mode=None
        )
        await state.set_state(PointsSystemSettingsStates.waiting_for_points_per_100_rubles)
    else:
        await message.answer(
            "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:\n"
            f"–ë–æ–Ω—É—Å—ã –∑–∞ 100 —Ä—É–±–ª–µ–π: {settings.get('points_per_100_rubles')}\n"
            f"–ë–æ–Ω—É—Å—ã –∑–∞ 1% —Å–∫–∏–¥–∫–∏: {settings.get('points_per_1_percent')}\n"
            f"–ë–æ–Ω—É—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {settings.get('new_user_points', 0)}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:",
            reply_markup=points_system_settings_keyboard(),
            parse_mode=None
        )
        await state.set_state(EditPointsSystemSettingsStates.choosing_field)

@admin_points_settings_router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", StateFilter(EditPointsSystemSettingsStates.choosing_field))
async def show_edit_points_settings_menu(message: Message, state: FSMContext):
    logger.debug(f"User {message.from_user.id} requested edit points system settings")
    settings = await get_points_system_settings()
    if not settings:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=admin_keyboard(),
            parse_mode=None
        )
        await state.clear()
        return
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_points_system_settings_keyboard(),
        parse_mode=None
    )
    await state.set_state(EditPointsSystemSettingsStates.choosing_field)

@admin_points_settings_router.message(
    StateFilter(EditPointsSystemSettingsStates.choosing_field),
    F.text.in_(["–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ 100 —Ä—É–±–ª–µ–π", "–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ 1% —Å–∫–∏–¥–∫–∏", "–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"])
)
async def handle_field_selection(message: Message, state: FSMContext):
    logger.debug(f"User {message.from_user.id} selected field: {message.text}")
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ 100 —Ä—É–±–ª–µ–π":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–æ–Ω—É—Å–æ–≤ –∑–∞ 100 —Ä—É–±–ª–µ–π:",
            reply_markup=cancel_keyboard(),
            parse_mode=None
        )
        await state.set_state(EditPointsSystemSettingsStates.waiting_for_points_per_100_rubles)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ 1% —Å–∫–∏–¥–∫–∏":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–æ–Ω—É—Å–æ–≤ –∑–∞ 1% —Å–∫–∏–¥–∫–∏:",
            reply_markup=cancel_keyboard(),
            parse_mode=None
        )
        await state.set_state(EditPointsSystemSettingsStates.waiting_for_points_per_1_percent)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=cancel_keyboard(),
            parse_mode=None
        )
        await state.set_state(EditPointsSystemSettingsStates.waiting_for_new_user_points)

@admin_points_settings_router.message(
    StateFilter(EditPointsSystemSettingsStates.waiting_for_points_per_100_rubles)
)
async def handle_edit_points_per_100_rubles(message: Message, state: FSMContext):
    try:
        points = int(message.text)
        if points <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode=None
        )
        return
    settings = await get_points_system_settings()
    if not settings:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=admin_keyboard(),
            parse_mode=None
        )
        await state.clear()
        return
    updated_fields = {
        "points_per_100_rubles": points,
        "points_per_1_percent": settings.get("points_per_1_percent")
    }
    success = await update_points_system_settings(settings.get("id"), updated_fields)
    await state.clear()
    if success:
        await message.answer(
            f"–ë–æ–Ω—É—Å—ã –∑–∞ 100 —Ä—É–±–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {points}!",
            reply_markup=points_system_settings_keyboard(),
            parse_mode=None
        )
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_keyboard(),
            parse_mode=None
        )

@admin_points_settings_router.message(
    StateFilter(EditPointsSystemSettingsStates.waiting_for_points_per_1_percent)
)
async def handle_edit_points_per_1_percent(message: Message, state: FSMContext):
    try:
        points = int(message.text)
        if points <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode=None
        )
        return
    settings = await get_points_system_settings()
    if not settings:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=admin_keyboard(),
            parse_mode=None
        )
        await state.clear()
        return
    updated_fields = {
        "points_per_100_rubles": settings.get("points_per_100_rubles"),
        "points_per_1_percent": points
    }
    success = await update_points_system_settings(settings.get("id"), updated_fields)
    await state.clear()
    if success:
        await message.answer(
            f"–ë–æ–Ω—É—Å—ã –∑–∞ 1% —Å–∫–∏–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {points}!",
            reply_markup=points_system_settings_keyboard(),
            parse_mode=None
        )
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_keyboard(),
            parse_mode=None
        )

@admin_points_settings_router.message(
    StateFilter(EditPointsSystemSettingsStates.waiting_for_new_user_points)
)
async def handle_edit_new_user_points(message: Message, state: FSMContext):
    try:
        points = int(message.text)
        if points <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode=None
        )
        return
    settings = await get_points_system_settings()
    if not settings:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=admin_keyboard(),
            parse_mode=None
        )
        await state.clear()
        return
    updated_fields = {
        "new_user_points": points,
        "points_per_100_rubles": settings.get("points_per_100_rubles"),
        "points_per_1_percent": settings.get("points_per_1_percent")
    }
    success = await update_points_system_settings(settings.get("id"), updated_fields)
    await state.clear()
    if success:
        await message.answer(
            f"–ë–æ–Ω—É—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {points}!",
            reply_markup=points_system_settings_keyboard(),
            parse_mode=None
        )
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_keyboard(),
            parse_mode=None
        )

@admin_points_settings_router.message(StateFilter(PointsSystemSettingsStates.waiting_for_points_per_100_rubles))
async def handle_points_per_100_rubles(message: Message, state: FSMContext):
    try:
        points = int(message.text)
        if points <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode=None
        )
        return
    await state.update_data(points_per_100_rubles=points)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ 1% —Å–∫–∏–¥–∫–∏:",
        parse_mode=None
    )
    await state.set_state(PointsSystemSettingsStates.waiting_for_points_per_1_percent)

@admin_points_settings_router.message(StateFilter(PointsSystemSettingsStates.waiting_for_points_per_1_percent))
async def handle_points_per_1_percent(message: Message, state: FSMContext):
    try:
        points = int(message.text)
        if points <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode=None
        )
        return
    await state.update_data(points_per_1_percent=points)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode=None
    )
    await state.set_state(PointsSystemSettingsStates.waiting_for_new_user_points)

@admin_points_settings_router.message(StateFilter(PointsSystemSettingsStates.waiting_for_new_user_points))
async def handle_new_user_points(message: Message, state: FSMContext):
    try:
        points = int(message.text)
        if points <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            parse_mode=None
        )
        return
    await state.update_data(new_user_points=points)
    data = await state.get_data()
    success = await create_points_system_settings({
        "points_per_100_rubles": data["points_per_100_rubles"],
        "points_per_1_percent": data["points_per_1_percent"],
        "new_user_poinrs": data["new_user_points"]
    })
    await state.clear()
    if success:
        await message.answer(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã:\n"
            f"–ë–æ–Ω—É—Å—ã –∑–∞ 100 —Ä—É–±–ª–µ–π: {data.get('points_per_100_rubles')}\n"
            f"–ë–æ–Ω—É—Å—ã –∑–∞ 1% —Å–∫–∏–¥–∫–∏: {data.get('points_per_1_percent')}\n"
            f"–ë–æ–Ω—É—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data.get('new_user_points', 0)}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:",
            reply_markup=points_system_settings_keyboard(),
            parse_mode=None
        )
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_keyboard(),
            parse_mode=None
        )