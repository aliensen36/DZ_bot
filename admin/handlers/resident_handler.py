import aiohttp
from aiogram import F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, \
    BufferedInputFile
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from admin.keyboards.admin_inline import residents_management_inline_keyboard, \
    get_categories_keyboard, get_delete_categories_keyboard, get_confirmation_keyboard, \
    get_residents_management_keyboard
from admin.services.utils import fetch_categories, \
    create_category, delete_category, show_categories_message, fetch_categories_with_keyboard, create_resident_api, \
    fetch_residents_list, update_resident_category_api, update_resident_field_api, fetch_residents_for_deletion, \
    delete_resident_api, generate_residents_excel
from data.config import config_settings
from admin.keyboards.admin_reply import admin_keyboard, residents_management_keyboard, get_back_keyboard
from data.url import url_resident, url_category
from utils.filters import ChatTypeFilter, IsGroupAdmin, ADMIN_CHAT_ID
from admin.handlers.points_system_settings import EditPointsSystemSettingsStates

import logging
logger = logging.getLogger(__name__)

admin_resident_router = Router()
admin_resident_router.message.filter(
    ChatTypeFilter("private"),
    IsGroupAdmin([ADMIN_CHAT_ID], show_message=False)
)



# =================================================================================================
# FSM
# =================================================================================================


class CategoryForm(StatesGroup):
    waiting_for_new_category = State()
    waiting_for_delete_confirmation = State()


class ResidentForm(StatesGroup):
    waiting_for_category = State()
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_building = State()
    waiting_for_entrance = State()
    waiting_for_floor = State()
    waiting_for_office = State()
    waiting_for_confirmation = State()


# =================================================================================================
#
# =================================================================================================


@admin_resident_router.message(F.text == "üè¢ –†–µ–∑–∏–¥–µ–Ω—Ç—ã")
async def handle_residents(message: Message):
    await message.answer(
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>",
        reply_markup=residents_management_inline_keyboard()
    )


# =================================================================================================
# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
# =================================================================================================


@admin_resident_router.callback_query(F.data == "resident_categories")
async def handle_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await callback.message.delete()
    await show_categories_message(callback.message.chat.id, callback.bot, get_categories_keyboard())
    await callback.answer()


@admin_resident_router.callback_query(F.data == "add_category")
async def handle_add_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await fetch_categories(tree=True)

    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="add_main_category")

    if categories:
        # –°–æ–±–∏—Ä–∞–µ–º ID –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        subcategory_ids = set()

        def collect_child_ids(cat):
            for child in cat.get('children', []):
                subcategory_ids.add(child['id'])
                collect_child_ids(child)

        for cat in categories:
            collect_child_ids(cat)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏)
        for cat in categories:
            if cat['id'] not in subcategory_ids:
                builder.button(
                    text=f"üîπ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è: {cat['name']}",
                    callback_data=f"select_parent_{cat['id']}"
                )

    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_category")
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@admin_resident_router.callback_query(F.data == "add_main_category")
async def handle_add_main_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_category")
        .as_markup()
    )
    await state.set_state("waiting_for_category_name")
    await state.update_data(parent_id=None)
    await callback.answer()


@admin_resident_router.callback_query(F.data.startswith("select_parent_"))
async def handle_select_parent(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    parent_id = int(callback.data.split("_")[-1])
    await state.update_data(parent_id=parent_id)

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_category")
        .as_markup()
    )
    await state.set_state("waiting_for_category_name")
    await callback.answer()


@admin_resident_router.message(F.text, StateFilter("waiting_for_category_name"))
async def process_category_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    parent_id = data.get('parent_id')
    category_name = message.text.strip()

    if len(category_name) < 2:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    success = await create_category(category_name, parent_id)
    if success:
        parent_text = f" (–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è)" if parent_id else ""
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}'{parent_text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    await state.clear()
    await show_categories_message(message.chat.id, message.bot, get_categories_keyboard())


@admin_resident_router.callback_query(F.data == "delete_category_menu")
async def handle_delete_category_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await fetch_categories(tree=True)

    if not categories:
        await callback.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return

    builder = get_delete_categories_keyboard(categories)
    builder.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_category")
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–º–µ—Å—Ç–µ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏):",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@admin_resident_router.callback_query(F.data.startswith("confirm_delete_category_"))
async def handle_confirm_delete(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    category_id = int(callback.data.split("_")[-1])
    categories = await fetch_categories(tree=True)

    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –¥–µ—Ä–µ–≤–µ
    def find_category(tree, cat_id):
        for cat in tree:
            if cat['id'] == cat_id:
                return cat
            found = find_category(cat.get('children', []), cat_id)
            if found:
                return found
        return None

    category = find_category(categories, category_id)

    if not category:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–¥–∞–ª—è–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ä–æ–¥–∏—Ç–µ–ª—å + –¥–µ—Ç–∏)
    def get_all_children(cat):
        children = [cat['name']]
        for child in cat.get('children', []):
            children.extend(get_all_children(child))
        return children

    deleting_categories = get_all_children(category)
    deleting_text = "\n".join(f"‚Ä¢ {name}" for name in deleting_categories)

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category['name']}' –∏ –≤—Å–µ –µ—ë –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏?\n"
        f"–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n{deleting_text}",
        reply_markup=get_confirmation_keyboard(category_id)
    )
    await callback.answer()


@admin_resident_router.callback_query(F.data.startswith("delete_category_"))
async def handle_delete_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[-1])
    success = await delete_category(category_id)

    if success:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    else:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    await show_categories_message(callback.message.chat.id, callback.bot, get_categories_keyboard())
    await callback.answer()


# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
@admin_resident_router.callback_query(F.data == "cancel_add_category")
async def cancel_add_category(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.clear()
    await show_categories_message(callback.message.chat.id, callback.bot, get_categories_keyboard())
    await callback.answer()


@admin_resident_router.callback_query(F.data == "cancel_delete_category")
async def cancel_delete_category(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await show_categories_message(callback.message.chat.id, callback.bot, get_categories_keyboard())
    await callback.answer()


# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
@admin_resident_router.callback_query(F.data == "back_to_residents_management")
async def back_to_residents_management(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏"""
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏:",
        reply_markup=residents_management_inline_keyboard()
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
@admin_resident_router.callback_query(F.data == "admin_back")
async def back_to_admin_menu_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=None
    )
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=admin_keyboard()
    )
    await callback.answer()


# =================================================================================================
# –†–µ–∑–∏–¥–µ–Ω—Ç—ã
# =================================================================================================


@admin_resident_router.callback_query(F.data == "residents_list")
async def residents_list(callback: CallbackQuery):
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏",
        reply_markup=get_residents_management_keyboard()
    )


# =================================================================================================
# –°–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
# =================================================================================================


@admin_resident_router.callback_query(F.data == "show_residents_list")
async def show_residents_list(callback: CallbackQuery):
    residents, error = await fetch_residents_list()

    if error:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        if callback.message.text != f"‚ùå {error}":
            await callback.message.edit_text(
                f"‚ùå {error}",
                reply_markup=get_residents_management_keyboard()
            )
        return

    if not residents:
        if callback.message.text != "–°–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç":
            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç",
                reply_markup=get_residents_management_keyboard()
            )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    new_text = "üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤:\n\n" + "\n".join(
        f"{idx}. {r['name']}" for idx, r in enumerate(residents, 1)
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel",
            callback_data="export_residents_to_excel"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_residents_management"
        )
    )
    new_markup = builder.as_markup()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    if (callback.message.text != new_text or
            str(callback.message.reply_markup) != str(new_markup)):
        await callback.message.edit_text(
            new_text,
            reply_markup=new_markup
        )


@admin_resident_router.callback_query(F.data == "export_residents_to_excel")
async def export_residents_to_excel(callback: CallbackQuery):
    excel_file, error = await generate_residents_excel()

    if error:
        if callback.message.text != f"‚ùå {error}":
            await callback.message.answer(
                f"‚ùå {error}",
                reply_markup=get_residents_management_keyboard()
            )
        await callback.answer()
        return

    try:
        await callback.answer()
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞
        excel_file.seek(0)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=BufferedInputFile(
                excel_file.read(),
                filename="residents.xlsx"
            ),
            caption="–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        await callback.message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                        callback_data="back_to_residents_management"
                    )]
                ]
            )
        )

    except Exception as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
            reply_markup=get_residents_management_keyboard()
        )
        await callback.answer()


# =================================================================================================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
# =================================================================================================


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_resident_router.callback_query(F.data == "add_resident")
async def add_resident_start(callback: CallbackQuery, state: FSMContext):
    try:
        categories, keyboard = await fetch_categories_with_keyboard()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:",
            reply_markup=keyboard
        )
        await state.set_state(ResidentForm.waiting_for_category)
    except Exception as e:
        await callback.message.edit_text(f"‚ùå {str(e)}")


@admin_resident_router.callback_query(F.data.startswith("select_category_"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
        category_id = callback.data.split("_")[-1]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        for row in callback.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data == callback.data:
                    category_name = button.text
                    break

        if not category_name:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        await state.update_data(category_id=category_id, category_name=category_name)
        await state.set_state(ResidentForm.waiting_for_name)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="add_resident").as_markup()
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        await callback.answer()


@admin_resident_router.message(ResidentForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ResidentForm.waiting_for_address)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–∏–Ω—è—Ç–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ê–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            callback_data="use_default_address"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="residents_list"
        )
    )

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
        "(–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: '—É–ª. –ë–æ–ª—å—à–∞—è –ù–æ–≤–æ–¥–º–∏—Ç—Ä–æ–≤—Å–∫–∞—è, –¥. 36')",
        reply_markup=builder.as_markup()
    )


@admin_resident_router.callback_query(F.data == "use_default_address", ResidentForm.waiting_for_address)
async def use_default_address(callback: CallbackQuery, state: FSMContext):
    default_address = "—É–ª. –ë–æ–ª—å—à–∞—è –ù–æ–≤–æ–¥–º–∏—Ç—Ä–æ–≤—Å–∫–∞—è, –¥. 36"
    await state.update_data(address=default_address)
    await callback.message.edit_text(
        f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_address}"
    )
    await state.set_state(ResidentForm.waiting_for_building)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardBuilder().button(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="residents_list"
        ).as_markup()
    )


@admin_resident_router.message(ResidentForm.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç (–Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É)
    address = message.text if message.text.strip() else "—É–ª. –ë–æ–ª—å—à–∞—è –ù–æ–≤–æ–¥–º–∏—Ç—Ä–æ–≤—Å–∫–∞—è, –¥. 36"
    await state.update_data(address=address)
    await state.set_state(ResidentForm.waiting_for_building)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardBuilder().button(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data="residents_list"
        ).as_markup()
    )


@admin_resident_router.message(ResidentForm.waiting_for_building)
async def process_building(message: Message, state: FSMContext):
    await state.update_data(building=message.text)
    await state.set_state(ResidentForm.waiting_for_entrance)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ö–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="residents_list").as_markup()
    )


@admin_resident_router.message(ResidentForm.waiting_for_entrance)
async def process_entrance(message: Message, state: FSMContext):
    entrance = message.text if message.text != "-" else None
    await state.update_data(entrance=entrance)
    await state.set_state(ResidentForm.waiting_for_floor)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞:",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="residents_list").as_markup()
    )


@admin_resident_router.message(ResidentForm.waiting_for_floor)
async def process_floor(message: Message, state: FSMContext):
    floor = message.text.strip()
    if not floor:
        await message.answer("–ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    await state.update_data(floor=floor)
    await state.set_state(ResidentForm.waiting_for_office)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞:",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="residents_list").as_markup()
    )


@admin_resident_router.message(ResidentForm.waiting_for_office)
async def process_office(message: Message, state: FSMContext):
    office = message.text.strip()
    if not office:
        await message.answer("–ù–æ–º–µ—Ä –æ—Ñ–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
    resident_data = {
        "name": data["name"],
        "address": data["address"],
        "building": data["building"],
        "entrance": data.get("entrance"),
        "floor": data["floor"],
        "office": office,
        "category_ids": [data["category_id"]]
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
    summary_message = (
        "üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:\n\n"
        f"üè¢ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üèó –°—Ç—Ä–æ–µ–Ω–∏–µ: {data['building']}\n"
        f"üö™ –í—Ö–æ–¥: {data.get('entrance', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üõó –≠—Ç–∞–∂: {data['floor']}\n"
        f"üö™ –û—Ñ–∏—Å: {office}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category_name']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ:"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_create_resident")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_resident_creation")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    await state.update_data(resident_data=resident_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        summary_message,
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(ResidentForm.waiting_for_confirmation)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
@admin_resident_router.callback_query(F.data == "confirm_create_resident", ResidentForm.waiting_for_confirmation)
async def confirm_create_resident(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    resident_data = data["resident_data"]

    success, result_message = await create_resident_api(resident_data)
    await callback.message.answer(result_message)

    if success:
        await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è
@admin_resident_router.callback_query(F.data == "cancel_resident_creation", ResidentForm.waiting_for_confirmation)
async def cancel_resident_creation(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await callback.answer()


# =================================================================================================
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
# =================================================================================================


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ - —Å–ø–∏—Å–æ–∫
@admin_resident_router.callback_query(F.data == "edit_resident_list")
async def edit_resident_list(callback: CallbackQuery):
    residents, error = await fetch_residents_list()

    if error:
        await callback.message.edit_text(error)
        return

    builder = InlineKeyboardBuilder()
    for resident in residents:
        builder.row(InlineKeyboardButton(
            text=resident["name"],
            callback_data=f"edit_resident_{resident['id']}"
        ))
    builder.row(InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data="residents_list"
    ))

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ - –≤—ã–±–æ—Ä –ø–æ–ª—è
@admin_resident_router.callback_query(F.data.startswith("edit_resident_"))
async def edit_resident_select_field(callback: CallbackQuery, state: FSMContext):
    resident_id = callback.data.split("_")[-1]
    await state.update_data(resident_id=resident_id)

    builder = InlineKeyboardBuilder()
    fields = [
        ("–ù–∞–∑–≤–∞–Ω–∏–µ", "name"),
        ("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "category"),
        ("–ê–¥—Ä–µ—Å", "address"),
        ("–°—Ç—Ä–æ–µ–Ω–∏–µ", "building"),
        ("–í—Ö–æ–¥", "entrance"),
        ("–≠—Ç–∞–∂", "floor"),
        ("–û—Ñ–∏—Å", "office")
    ]

    for field in fields:
        builder.row(InlineKeyboardButton(
            text=f"‚úèÔ∏è {field[0]}",
            callback_data=f"edit_field_{field[1]}"
        ))

    builder.row(InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data="edit_resident_list"
    ))

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )


async def edit_resident_category(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API
        categories_response = await fetch_categories(tree=True)

        if "error" in categories_response:
            await callback.message.edit_text(f"‚ùå {categories_response['error']}")
            return

        # –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()

        def build_category_buttons(categories, level=0):
            for category in categories:
                indent = "    " * level
                builder.add(InlineKeyboardButton(
                    text=f"{indent}üìå {category['name']}",
                    callback_data=f"update_category_{category['id']}"
                ))
                if category.get('children'):
                    build_category_buttons(category['children'], level + 1)

        build_category_buttons(categories_response)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        builder.row(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
            callback_data=lambda: edit_resident_select_field(callback, state)
        ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
@admin_resident_router.callback_query(F.data.startswith("edit_field_"))
async def edit_resident_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[-1]
    await state.update_data(edit_field=field)

    if field == "category":
        await edit_resident_category(callback, state)
    else:
        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞",
                callback_data=lambda: edit_resident_select_field(callback, state)
            ).as_markup()
        )


@admin_resident_router.callback_query(F.data.startswith("update_category_"))
async def update_resident_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[-1])
    data = await state.get_data()

    success, message = await update_resident_category_api(
        resident_id=data['resident_id'],
        category_id=category_id
    )

    await callback.message.edit_text(message)
    await state.clear()

    if success:
        await edit_resident_list(callback)


@admin_resident_router.message()
async def update_resident_field(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data.get("edit_field")
    resident_id = data.get("resident_id")
    
    if not field or not resident_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        await state.clear()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if field in ["floor", "office"]:
        try:
            value = int(message.text)
        except ValueError:
            await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
    else:
        value = message.text

    # –í—ã–∑–æ–≤ API —Ñ—É–Ω–∫—Ü–∏–∏
    success, result_message = await update_resident_field_api(
        resident_id=resident_id,
        field=field,
        value=value,
        headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    )

    await message.answer(result_message)
    await state.clear()

    if success:
        await edit_resident_list(message)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ - —Å–ø–∏—Å–æ–∫
@admin_resident_router.callback_query(F.data == "delete_resident_list")
async def delete_resident_list(callback: CallbackQuery):
    residents, error = await fetch_residents_for_deletion()

    if error:
        await callback.message.edit_text(error)
        return

    builder = InlineKeyboardBuilder()
    for resident in residents:
        builder.row(InlineKeyboardButton(
            text=resident["name"],
            callback_data=f"confirm_delete_{resident['id']}"
        ))
    builder.row(InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data="residents_list"
    ))

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@admin_resident_router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_resident(callback: CallbackQuery):
    resident_id = callback.data.split("_")[-1]
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_resident_{resident_id}"
        ),
        InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
            callback_data="delete_resident_list"
        )
    )
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞?",
        reply_markup=builder.as_markup()
    )


# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
@admin_resident_router.callback_query(F.data.startswith("delete_resident_"))
async def delete_resident(callback: CallbackQuery):
    resident_id = callback.data.split("_")[-1]
    success, message = await delete_resident_api(resident_id)

    await callback.message.edit_text(message)

    if success:
        await residents_list(callback)