import aiohttp
from aiogram import F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from admin.keyboards.admin_inline import get_categories_keyboard
from data.config import config_settings
from admin.keyboards.admin_reply import admin_keyboard, residents_management_keyboard
from data.url import url_resident
from utils.filters import ChatTypeFilter, IsGroupAdmin, ADMIN_CHAT_ID


admin_resident_router = Router()
admin_resident_router.message.filter(
    ChatTypeFilter("private"),
    IsGroupAdmin([ADMIN_CHAT_ID], show_message=False)
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ResidentForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_category = State()
    waiting_for_description = State()
    waiting_for_working_time = State()
    waiting_for_email = State()
    waiting_for_phone = State()
    waiting_for_website = State()
    waiting_for_address = State()
    waiting_for_floor = State()
    waiting_for_office = State()
    editing_resident = State()


# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–†–µ–∑–∏–¥–µ–Ω—Ç—ã"
@admin_resident_router.message(F.text == "üè¢ –†–µ–∑–∏–¥–µ–Ω—Ç—ã")
async def handle_residents(message: Message):
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏:",
        reply_markup=residents_management_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞"
@admin_resident_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞")
async def add_resident_start(message: Message, state: FSMContext):
    await state.set_state(ResidentForm.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
@admin_resident_router.message(ResidentForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ResidentForm.waiting_for_category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await get_categories_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_resident_router.callback_query(F.data.startswith("category_"), ResidentForm.waiting_for_category)
async def process_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    await state.update_data(category=category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:")
    await state.set_state(ResidentForm.waiting_for_description)
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞"
@admin_resident_router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞")
async def edit_resident_start(message: Message):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
    residents = ["Resident 1", "Resident 2"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î

    if not residents:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    builder = ReplyKeyboardBuilder()
    for resident in residents:
        builder.button(text=f"‚úèÔ∏è {resident}")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")
    builder.adjust(1)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞"
@admin_resident_router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞")
async def delete_resident_start(message: Message):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
    residents = ["Resident 1", "Resident 2"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î

    if not residents:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    builder = ReplyKeyboardBuilder()
    for resident in residents:
        builder.button(text=f"üóëÔ∏è {resident}")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")
    builder.adjust(1)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@admin_resident_router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_admin_menu(message: Message):
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=admin_keyboard()
    )
