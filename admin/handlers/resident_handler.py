import aiohttp
from aiogram import F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from admin.keyboards.admin_inline import residents_management_inline_keyboard, \
    get_categories_keyboard, get_delete_categories_keyboard, get_confirmation_keyboard
from admin.services.utils import fetch_categories, \
    create_category, delete_category, show_categories_message
from data.config import config_settings
from admin.keyboards.admin_reply import admin_keyboard, residents_management_keyboard, get_back_keyboard
from data.url import url_resident, url_category
from utils.filters import ChatTypeFilter, IsGroupAdmin, ADMIN_CHAT_ID

import logging
logger = logging.getLogger(__name__)

admin_resident_router = Router()
admin_resident_router.message.filter(
    ChatTypeFilter("private"),
    IsGroupAdmin([ADMIN_CHAT_ID], show_message=False)
)


# =================================================================================================
# FSM
# =================================================================================================


class CategoryForm(StatesGroup):
    waiting_for_new_category = State()
    waiting_for_delete_confirmation = State()


class ResidentForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_category = State()
    waiting_for_new_category = State()
    waiting_for_address = State()
    waiting_for_floor = State()
    waiting_for_office = State()
    editing_resident = State()


# =================================================================================================
#
# =================================================================================================


@admin_resident_router.message(F.text == "üè¢ –†–µ–∑–∏–¥–µ–Ω—Ç—ã")
async def handle_residents(message: Message):
    await message.answer(
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>",
        reply_markup=residents_management_inline_keyboard()
    )


# =================================================================================================
# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
# =================================================================================================


@admin_resident_router.callback_query(F.data == "resident_categories")
async def handle_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await callback.message.delete()
    await show_categories_message(callback.message.chat.id, callback.bot, get_categories_keyboard())
    await callback.answer()


@admin_resident_router.callback_query(F.data == "add_category")
async def handle_add_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await fetch_categories(tree=True)

    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="add_main_category")

    if categories:
        # –°–æ–±–∏—Ä–∞–µ–º ID –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        subcategory_ids = set()

        def collect_child_ids(cat):
            for child in cat.get('children', []):
                subcategory_ids.add(child['id'])
                collect_child_ids(child)

        for cat in categories:
            collect_child_ids(cat)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏)
        for cat in categories:
            if cat['id'] not in subcategory_ids:
                builder.button(
                    text=f"üîπ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è: {cat['name']}",
                    callback_data=f"select_parent_{cat['id']}"
                )

    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_category")
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@admin_resident_router.callback_query(F.data == "add_main_category")
async def handle_add_main_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_category")
        .as_markup()
    )
    await state.set_state("waiting_for_category_name")
    await state.update_data(parent_id=None)
    await callback.answer()


@admin_resident_router.callback_query(F.data.startswith("select_parent_"))
async def handle_select_parent(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    parent_id = int(callback.data.split("_")[-1])
    await state.update_data(parent_id=parent_id)

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_category")
        .as_markup()
    )
    await state.set_state("waiting_for_category_name")
    await callback.answer()


@admin_resident_router.message(F.text, StateFilter("waiting_for_category_name"))
async def process_category_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    parent_id = data.get('parent_id')
    category_name = message.text.strip()

    if len(category_name) < 2:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    success = await create_category(category_name, parent_id)
    if success:
        parent_text = f" (–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è)" if parent_id else ""
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}'{parent_text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    await state.clear()
    await show_categories_message(message.chat.id, message.bot, get_categories_keyboard())



@admin_resident_router.callback_query(F.data == "delete_category_menu")
async def handle_delete_category_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = await fetch_categories(tree=True)

    if not categories:
        await callback.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return

    builder = get_delete_categories_keyboard(categories)
    builder.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_category")
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–º–µ—Å—Ç–µ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏):",
        reply_markup=builder.as_markup()
    )
    await callback.answer()



@admin_resident_router.callback_query(F.data.startswith("confirm_delete_category_"))
async def handle_confirm_delete(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    category_id = int(callback.data.split("_")[-1])
    categories = await fetch_categories(tree=True)

    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –¥–µ—Ä–µ–≤–µ
    def find_category(tree, cat_id):
        for cat in tree:
            if cat['id'] == cat_id:
                return cat
            found = find_category(cat.get('children', []), cat_id)
            if found:
                return found
        return None

    category = find_category(categories, category_id)

    if not category:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–¥–∞–ª—è–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ä–æ–¥–∏—Ç–µ–ª—å + –¥–µ—Ç–∏)
    def get_all_children(cat):
        children = [cat['name']]
        for child in cat.get('children', []):
            children.extend(get_all_children(child))
        return children

    deleting_categories = get_all_children(category)
    deleting_text = "\n".join(f"‚Ä¢ {name}" for name in deleting_categories)

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category['name']}' –∏ –≤—Å–µ –µ—ë –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏?\n"
        f"–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n{deleting_text}",
        reply_markup=get_confirmation_keyboard(category_id)
    )
    await callback.answer()


@admin_resident_router.callback_query(F.data.startswith("delete_category_"))
async def handle_delete_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[-1])
    success = await delete_category(category_id)

    if success:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    else:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    await show_categories_message(callback.message.chat.id, callback.bot, get_categories_keyboard())
    await callback.answer()



# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
@admin_resident_router.callback_query(F.data == "cancel_add_category")
async def cancel_add_category(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.clear()
    await show_categories_message(callback.message.chat.id, callback.bot, get_categories_keyboard())
    await callback.answer()



@admin_resident_router.callback_query(F.data == "cancel_delete_category")
async def cancel_delete_category(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await show_categories_message(callback.message.chat.id, callback.bot, get_categories_keyboard())
    await callback.answer()



# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
@admin_resident_router.callback_query(F.data == "back_to_residents_management")
async def back_to_residents_management(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏"""
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏:",
        reply_markup=residents_management_inline_keyboard()
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
@admin_resident_router.callback_query(F.data == "admin_back")
async def back_to_admin_menu_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=None
    )
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=admin_keyboard()
    )
    await callback.answer()


# =================================================================================================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
# =================================================================================================


# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞"
@admin_resident_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞")
async def add_resident_start(message: Message, state: FSMContext):
    await state.set_state(ResidentForm.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:",
                         reply_markup=get_back_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
@admin_resident_router.message(ResidentForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏",
            reply_markup=residents_management_keyboard()
        )
        return

    await state.update_data(name=message.text)
    markup = await get_categories_keyboard()
    if markup:
        await state.set_state(ResidentForm.waiting_for_category)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∫ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        reply_markup = InlineKeyboardMarkup(inline_keyboard=markup.inline_keyboard + [
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_name")]
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    else:
        await state.set_state(ResidentForm.waiting_for_new_category)
        await message.answer(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=get_back_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# @admin_resident_router.callback_query(F.data.startswith("category_"), ResidentForm.waiting_for_category)
# async def process_category(callback: CallbackQuery, state: FSMContext):
#     category = callback.data.split("_")[1]
#     await state.update_data(category=category)
#     await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:")
#     await state.set_state(ResidentForm.waiting_for_description)
#     await callback.answer()
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# @admin_resident_router.message(ResidentForm.waiting_for_new_category)
# async def process_new_category(message: Message, state: FSMContext):
#     category_name = message.text.strip()
#     if not category_name:
#         await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
#         return
#     # –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ë–î
#     category_id = await create_new_category(category_name)
#     if category_id is None:
#         await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
#         return
#     await state.update_data(category=category_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:")
#     await state.set_state(ResidentForm.waiting_for_)
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
# @admin_resident_router.message(ResidentForm.waiting_for_description)
# async def process_description(message: Message, state: FSMContext):
#     description = message.text.strip()
#     if not description:
#         await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
#         return
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ state
#     await state.update_data(description=description)
#
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
#     data = await state.get_data()
#     name = data.get('name')
#     category_id = data.get('category')
#
#     # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –≤ –ë–î
#     resident = await create_new_resident(name, category_id, description)
#     if resident is None:
#         await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
#         return
#
#     # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
#     await state.clear()
#     await message.answer(f"–†–µ–∑–∏–¥–µ–Ω—Ç '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
#
#
# # =================================================================================================
# # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
# # =================================================================================================
#
#
# # –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞"
# @admin_resident_router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞")
# async def edit_resident_start(message: Message):
#     # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
#     residents = ["Resident 1", "Resident 2"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
#
#     if not residents:
#         await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
#         return
#
#     builder = ReplyKeyboardBuilder()
#     for resident in residents:
#         builder.button(text=f"‚úèÔ∏è {resident}")
#     builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")
#     builder.adjust(1)
#
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
#         reply_markup=builder.as_markup(resize_keyboard=True)
#     )
#
#
# # =================================================================================================
# # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
# # =================================================================================================
#
#
# # –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞"
# @admin_resident_router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞")
# async def delete_resident_start(message: Message):
#     # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
#     residents = ["Resident 1", "Resident 2"]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
#
#     if not residents:
#         await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
#         return
#
#     builder = ReplyKeyboardBuilder()
#     for resident in residents:
#         builder.button(text=f"üóëÔ∏è {resident}")
#     builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")
#     builder.adjust(1)
#
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
#         reply_markup=builder.as_markup(resize_keyboard=True)
#     )
#
