import logging
import os
import aiohttp
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from admin.keyboards.admin_inline import mailing_keyboard, admin_link_keyboard, accept_mailing_kb
from admin.keyboards.admin_reply import admin_keyboard
from data.url import *
from utils.filters import ChatTypeFilter, IsGroupAdmin, ADMIN_CHAT_ID
from utils.fsm_states import MailingFSM

logger = logging.getLogger(__name__)



admin_mailing_router = Router()
admin_mailing_router.message.filter(
    ChatTypeFilter("private"),
    IsGroupAdmin(ADMIN_CHAT_ID, show_message=False)
)


@admin_mailing_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_mailing(message: Message, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä—É—é—â–µ–µ —Ä–∞—Å—Å—ã–ª–∫—É.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º.

    Notes:
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ MailingFSM.text –∏ —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(MailingFSM.text)
    

@admin_mailing_router.message(MailingFSM.text)
async def get_text_mailing(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    Notes:
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏–Ω—É (–º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞) –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
    """
    await state.update_data(text=message.text)
    if len(message.text) > 1024:
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∞–Ω!\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:\n–ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, —Ç–∫ –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1024 —Å–∏–º–≤–æ–ª–∞",
                             reply_markup=await mailing_keyboard(len(message.text)))
        return
    elif len(message.text) > 1 and len(message.text) < 1024:
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∞–Ω!\n",
                             reply_markup= await mailing_keyboard(len(message.text)))
        return
    else:
        await message.answer("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
                             reply_markup=ReplyKeyboardRemove())
        return
    

@admin_mailing_router.callback_query(F.data == "change_text_mailing")
async def change_text_mailing(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç".
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.

    Notes:
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ MailingFSM.text –∏ —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
                                  reply_markup=ReplyKeyboardRemove())
    await state.set_state(MailingFSM.text)
    await callback.answer()
    return


@admin_mailing_router.callback_query(F.data == "mailing_add_image")
async def add_image_mailing(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É".
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Notes:
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ MailingFSM.image.
    """
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(MailingFSM.image)
    await callback.answer()
    return
    

@admin_mailing_router.message(MailingFSM.image)
async def get_image_mailing(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è file_id.

    Notes:
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ MailingFSM.wait.
    """
    if message.photo:
        await state.update_data(image=message.photo[-1].file_id)
        await message.answer("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:",
                             reply_markup=await mailing_keyboard(1000))
        await state.set_state(MailingFSM.wait)
    else:
        await message.answer("–≠—Ç–æ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    return


@admin_mailing_router.callback_query(F.data == "mailing_add_button_url")
async def add_button_url_mailing(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É".
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å—Å—ã–ª–∫–∏.

    Notes:
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ MailingFSM.button_url.
    """
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    await state.set_state(MailingFSM.button_url)
    await callback.answer()
    

@admin_mailing_router.message(MailingFSM.button_url)
async def get_button_url_mailing(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å—Å—ã–ª–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è URL.

    Notes:
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç URL (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://) –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ MailingFSM.wait.
    """
    link = message.text.split('/')
    if len(link) > 1 and link[0] == "https:" and link[1] == "":
        await state.update_data(button_url=message.text)
        await message.answer("–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:",
                             reply_markup=await mailing_keyboard(1000))
        await state.set_state(MailingFSM.wait)
    else:
        await message.answer("–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    return


@admin_mailing_router.callback_query(F.data == "send_mailing")
async def sending_mailing(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É".
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    Notes:
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏/–∏–ª–∏ –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    data = await state.get_data()
    text = data.get("text")
    image = data.get("image")
    button_url = data.get("button_url")
    
    if image:
        if button_url:
            await callback.message.answer_photo(photo=image, caption=text, reply_markup=await admin_link_keyboard(button_url))
        else:
            await callback.message.answer_photo(photo=image, caption=text)
    else:
        if button_url:
            await callback.message.answer(text, reply_markup=await admin_link_keyboard(button_url))
        else:
            await callback.message.answer(text)
    
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
                                  reply_markup=accept_mailing_kb)
    await callback.answer()
    await state.set_state(MailingFSM.wait)


async def download_image(callback: CallbackQuery, image_id: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞ –¥–∏—Å–∫.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.
        image_id (str): ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.

    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.

    Raises:
        Exception: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
    """
    bot = callback.bot
    file = await bot.get_file(image_id)
    file_data = await bot.download_file(file.file_path)

    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    filename = f"{image_id}.jpg"
    save_path = os.path.join("media", "mailing", "photos", filename)
    os.makedirs(os.path.dirname(save_path), exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(save_path, "wb") as f:
        f.write(file_data.getvalue())

    return f"/media/mailing/photos/{filename}"


@admin_mailing_router.callback_query(F.data == "accept_send_mailing")
async def send_mailing(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ API.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å".
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    Notes:
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏.
    """
    data = await state.get_data()
    text = data.get("text")
    image_id = data.get("image")
    button_url = data.get("button_url")

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API
    if not config_settings.BOT_API_KEY:
        logger.error("BOT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        await state.clear()
        return

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                url_users,
                headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
            ) as response:
                if response.status != 200:
                    error = await response.text()
                    logger.error(f"API users error: {response.status} - {error}")
                    await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    await state.clear()
                    return

                users = await response.json()
                if not isinstance(users, list):
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {type(users)}")
                    await callback.message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    await state.clear()
                    return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
        await state.clear()
        return

    if not users:
        await callback.message.answer("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        return

    # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    reply_markup = await admin_link_keyboard(button_url) if button_url else None
    total_users = len(users)
    success = 0
    failed = 0
    failed_users = []

    progress_msg = await callback.message.answer(
        f"üöÄ –ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/{total_users}"
    )

    # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    for index, user in enumerate(users, 1):
        try:
            tg_id = user.get("tg_id")
            if not tg_id:
                logger.error(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tg_id: {user}")
                failed += 1
                failed_users.append(f"ID:{user.get('id')} (–Ω–µ—Ç tg_id)")
                continue

            if image_id:
                await callback.bot.send_photo(
                    chat_id=tg_id,
                    photo=image_id,
                    caption=text,
                    reply_markup=reply_markup
                )
            else:
                await callback.bot.send_message(
                    chat_id=tg_id,
                    text=text,
                    reply_markup=reply_markup
                )
            success += 1

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10% –∏–ª–∏ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if index % max(20, total_users // 10) == 0 or index == total_users:
                try:
                    await progress_msg.edit_text(
                        f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {index}/{total_users}\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed}"
                    )
                except:
                    pass

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É - –ª–∏–º–∏—Ç Telegram)
            if index % 30 == 0:
                await asyncio.sleep(1)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
            failed += 1
            failed_users.append(str(tg_id))
            continue

    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ API
    mailing_data = {
        "text": text,
        "image": await download_image(callback, image_id) if image_id else None,
        "button_url": button_url,
        "type": "other",
        "tg_user_id": callback.from_user.id,
        "total_recipients": total_users,
        "successful_deliveries": success,
        "failed_deliveries": failed
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                url_mailing,
                json=mailing_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                if response.status != 201:
                    error = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {response.status} - {error}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    try:
        await progress_msg.delete()
    except:
        pass

    report = (
        f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
    )

    if failed > 0:
        failed_samples = ", ".join(failed_users[:10])
        report += f"\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_samples}"
        if failed > 10:
            report += f" –∏ –µ—â—ë {failed - 10}"

    await callback.message.answer(report, reply_markup=admin_keyboard())
    await callback.answer()
    await state.clear()


@admin_mailing_router.callback_query(F.data == "cancel_send_mailing")
async def cancel_send_mailing(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å".
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.

    Notes:
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã.
    """
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!",
                                  reply_markup=admin_keyboard())
    await callback.answer()
    await state.clear()
    
