from email.mime import image
import logging
import os

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext

from admin.keyboards.admin_keyboards import admin_keyboard
from admin.keyboards.inline_keyboards import admin_link_keyboard, mailing_keyboard, accept_mailing_kb
from admin.States.mailing_fsm import MailingFSM
from config import admin_chat_required
from database.models import Mailing
from database.requests import MailingRequests, UserRequests

logger = logging.getLogger(__name__)

admin_mailing_router = Router()

@admin_chat_required
@admin_mailing_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_mailing(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(MailingFSM.text)
    
@admin_chat_required
@admin_mailing_router.message(MailingFSM.text)
async def get_text_mailing(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.update_data(text=message.text)
    if len(message.text) > 1024:
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∞–Ω!\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:\n–ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, —Ç–∫ –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1024 —Å–∏–º–≤–æ–ª–∞", reply_markup=await mailing_keyboard(len(message.text)))
        return
    elif len(message.text) > 1 and len(message.text) < 1024:
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∞–Ω!\n", reply_markup= await mailing_keyboard(len(message.text)))
        return
    else:
        await message.answer("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
        return
    
@admin_chat_required
@admin_mailing_router.callback_query(F.data == "change_text_mailing")
async def change_text_mailing(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(MailingFSM.text)
    await callback.answer()
    return

@admin_chat_required
@admin_mailing_router.callback_query(F.data == "mailing_add_image")
async def add_image_mailing(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(MailingFSM.image)
    await callback.answer()
    return
    
@admin_chat_required
@admin_mailing_router.message(MailingFSM.image)
async def get_image_mailing(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.photo:
        await state.update_data(image=message.photo[-1].file_id)
        await message.answer("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=await mailing_keyboard(1000))
        await state.set_state(MailingFSM.wait)
    else:
        await message.answer("–≠—Ç–æ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    return

@admin_chat_required
@admin_mailing_router.callback_query(F.data == "mailing_add_button_url")
async def add_button_url_mailing(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    await state.set_state(MailingFSM.button_url)
    await callback.answer()
    
@admin_chat_required
@admin_mailing_router.message(MailingFSM.button_url)
async def get_button_url_mailing(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    link = message.text.split('/')
    if len(link) > 1 and link[0] == "https:" and link[1] == "":
        await state.update_data(button_url=message.text)
        await message.answer("–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=await mailing_keyboard(1000))
        await state.set_state(MailingFSM.wait)
    else:
        await message.answer("–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    return

@admin_chat_required
@admin_mailing_router.callback_query(F.data == "send_mailing")
async def sending_mailing(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    text = data.get("text")
    image = data.get("image")
    button_url = data.get("button_url")
    
    if image:
        if button_url:
            await callback.message.answer_photo(photo=image, caption=text, reply_markup=await admin_link_keyboard(button_url))
        else:
            await callback.message.answer_photo(photo=image, caption=text)
    else:
        if button_url:
            await callback.message.answer(text, reply_markup=await admin_link_keyboard(button_url))
        else:
            await callback.message.answer(text)
    
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=accept_mailing_kb)
    await state.set_state(MailingFSM.wait)

async def download_image(callback: CallbackQuery, image_id: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏"""
    bot = callback.bot
    file = await bot.get_file(image_id)
    file_data = await bot.download_file(file.file_path)

    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    filename = f"{image_id}.jpg"
    save_path = os.path.join("media", "mailing", "photos", filename)
    os.makedirs(os.path.dirname(save_path), exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(save_path, "wb") as f:
        f.write(file_data.getvalue())

    return f"/media/mailing/photos/{filename}"


@admin_chat_required
@admin_mailing_router.callback_query(F.data == "accept_send_mailing")
async def send_mailing(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    text = data.get("text")
    image = data.get("image")
    button_url = data.get("button_url")
    
    users = await UserRequests.get_all_users()
    for user in users:
        try:
            if image:
                if button_url:
                    await callback.message.bot.send_photo(chat_id=user.tg_id, photo=image, caption=text, reply_markup=await admin_link_keyboard(button_url))
                else:
                    await callback.message.bot.send_photo(chat_id=user.tg_id, photo=image, caption=text)
            else:
                if button_url:
                    await callback.message.bot.send_message(chat_id=user.tg_id, text=text, reply_markup=await admin_link_keyboard(button_url))
                else:
                    await callback.message.bot.send_message(chat_id=user.tg_id, text=text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
    image = await download_image(callback, image) if image else None
    await MailingRequests.create_mailing(
        from_user=await UserRequests.get_by_tg_id(callback.from_user.id),
        text=text,
        image=image,
        button_url=button_url,
        type = "other",
    )
    await state.clear()
    
@admin_chat_required
@admin_mailing_router.callback_query(F.data == "cancel_send_mailing")
async def cancel_send_mailing(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=admin_keyboard)
    await state.clear()
    
