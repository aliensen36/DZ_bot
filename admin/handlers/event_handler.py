import aiohttp
import base64
import logging
from io import BytesIO
from datetime import datetime, timezone
from aiogram import F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from data.config import config_settings
from admin.keyboards.admin_reply import events_management_keyboard, admin_keyboard, cancel_keyboard, edit_event_keyboard
from data.url import url_event
from utils.filters import ChatTypeFilter, IsGroupAdmin, ADMIN_CHAT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

admin_event_router = Router()
admin_event_router.message.filter(
    ChatTypeFilter("private"),
    IsGroupAdmin([ADMIN_CHAT_ID], show_message=False)
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class EventForm(StatesGroup):
    waiting_for_title = State()
    waiting_for_photo = State()
    waiting_for_description = State()
    waiting_for_info = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()
    waiting_for_location = State()

class EditEventForm(StatesGroup):
    choosing_field = State()
    waiting_for_title = State()
    waiting_for_photo = State()
    waiting_for_description = State()
    waiting_for_info = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()
    waiting_for_location = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
def format_datetime(dt_str):
    try:
        dt = datetime.fromisoformat(dt_str.replace("Z", "+00:00"))
        return dt.strftime("%d.%m.%Y %H:%M")
    except Exception:
        return dt_str or "-"


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–û—Ç–º–µ–Ω–∞"
@admin_event_router.message(F.text == "–û—Ç–º–µ–Ω–∞", StateFilter(EventForm))
async def cancel_event_creation(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=events_management_keyboard())


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_event_router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_admin_menu(message: Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=admin_keyboard()
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
async def create_new_event(event_data: dict, photo_file_id: str = None, bot=None):
    url = f"{url_event}"
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    payload = event_data.copy()

    if photo_file_id:
        payload["photo"] = photo_file_id
        print(f"Using Telegram file_id for photo: {photo_file_id}")
    else:
        payload["photo"] = ""

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as response:
                print(f"Create event status: {response.status}")
                print(f"Payload sent: {payload}")
                print(f"Response headers: {response.headers}")
                if response.status == 201:
                    return await response.json()
                else:
                    error_text = await response.text()
                    print(f"Error creating event: {error_text}")
                    return None
    except aiohttp.ClientError as e:
        print(f"HTTP Client Error creating event: {e}")
        return None
    except Exception as e:
        print(f"Unexpected error creating event: {e}")
        return None


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
@admin_event_router.message(F.text == "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def handle_events(message: Message):
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:",
        reply_markup=events_management_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def handle_add_event(message: Message, state: FSMContext):
    await state.set_state(EventForm.waiting_for_title)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=cancel_keyboard()
    )


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_title))
async def process_event_title(message: Message, state: FSMContext):
    title = message.text.strip()
    if not title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=cancel_keyboard())
        return
    await state.update_data(title=title)
    await state.set_state(EventForm.waiting_for_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=cancel_keyboard())


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_photo))
async def process_event_photo(message: Message, state: FSMContext):
    print(f"Received message in waiting_for_photo: type={message.content_type}, text={message.text}, photo={message.photo}")
    if message.photo:
        photo_file_id = message.photo[-1].file_id
        print(f"Photo received: file_id={photo_file_id}, size={message.photo[-1].file_size}")
        if message.photo[-1].file_size > 10 * 1024 * 1024:
            await message.answer("–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë.", reply_markup=cancel_keyboard())
            return
        await state.update_data(photo=photo_file_id)
        await state.set_state(EventForm.waiting_for_description)
        await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=cancel_keyboard())
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.", reply_markup=cancel_keyboard())


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_description))
async def process_event_description(message: Message, state: FSMContext):
    description = message.text.strip()
    if not description:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=cancel_keyboard())
        return
    await state.update_data(description=description)
    await state.set_state(EventForm.waiting_for_info)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏:", reply_markup=cancel_keyboard())


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
@admin_event_router.message(StateFilter(EventForm.waiting_for_info))
async def process_event_info(message: Message, state: FSMContext):
    info = message.text.strip()
    if not info:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=cancel_keyboard())
        return
    await state.update_data(info=info)
    await state.set_state(EventForm.waiting_for_start_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-06 15:30):", reply_markup=cancel_keyboard())


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_start_date))
async def process_start_date(message: Message, state: FSMContext):
    try:
        start_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
        current_time = datetime.now(timezone.utc)
        if start_date < current_time:
            await message.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-06 15:30).", reply_markup=cancel_keyboard())
            return
        await state.update_data(start_date=start_date)
        await state.set_state(EventForm.waiting_for_end_date)
        await message.answer(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ ({message.text}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM):", reply_markup=cancel_keyboard())
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-06 15:30).", reply_markup=cancel_keyboard())


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_end_date))
async def process_end_date(message: Message, state: FSMContext):
    try:
        end_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
        data = await state.get_data()
        start_date = data.get("start_date")
        if end_date <= start_date:
            await message.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM).", reply_markup=cancel_keyboard())
            return
        await state.update_data(end_date=end_date)
        await state.set_state(EventForm.waiting_for_location)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=cancel_keyboard())
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-06 15:30).", reply_markup=cancel_keyboard())


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_location))
async def process_event_location_and_create(message: Message, state: FSMContext, bot):
    location = message.text.strip()
    if not location:
        await message.answer("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=cancel_keyboard())
        return
    await state.update_data(location=location)
    data = await state.get_data()
    event_data = {
        "title": data.get("title"),
        "description": data.get("description"),
        "info": data.get("info"),
        "start_date": data.get("start_date").isoformat(),
        "end_date": data.get("end_date").isoformat(),
        "location": data.get("location")
    }
    photo_file_id = data.get("photo")
    created_event = await create_new_event(event_data, photo_file_id, bot)
    if created_event:

        await message.answer_photo(
            caption = (
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event_data['title']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {event_data['description']}\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {event_data['info']}\n"
            f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_datetime(event_data.get('start_date'))}\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime(event_data.get('end_date'))}\n"
            f"–ú–µ—Å—Ç–æ: {event_data['location']}"
            ),
            photo=created_event.get("photo", None),
            reply_markup=events_management_keyboard(),
        )
        await state.clear()
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=events_management_keyboard()
        )
        await state.clear()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
async def fetch_events() -> list:
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}

    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(f"{url_event}", headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"Fetched events data: {data}")
                    return data 
                else:
                    logger.warning(f"Failed to fetch events, status={resp.status}")
                    return []
    except aiohttp.ClientError as e:
        logger.error(f"Error fetching events: {e}")
        return []
    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async def get_event_by_title(title: str) -> dict:
    events = await fetch_events()
    for event in events:
        if event.get("title") == title:
            return event
    return None

    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
async def update_event(event_id: int, updated_fields: dict) -> bool:
    url = f"{url_event.rstrip('/')}/{event_id}/"
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    logger.info(f"Updating event data for event_id={event_id} with fields={updated_fields}, url={url}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(url, headers=headers) as resp_get:
                if resp_get.status != 200:
                    logger.error(f"Failed to fetch current event data for event_id={event_id}: status={resp_get.status}")
                    return False
                current_data = await resp_get.json()

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å updated_fields
                update_needed = False
                for key, value in updated_fields.items():
                    if value is not None and current_data.get(key) != value:
                        update_needed = True
                        break

                if not update_needed:
                    logger.info(f"No changes needed for event_id={event_id}")
                    return True

                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                async with session.patch(url, json=updated_fields, headers=headers) as resp:
                    response_text = await resp.text()
                    if resp.status in [200, 204]:
                        logger.info(f"Event data updated for event_id={event_id}, status={resp.status}")
                        return True
                    else:
                        logger.error(
                            f"Failed to update event data for event_id={event_id}: status={resp.status}, response={response_text}"
                        )
                        return False

    except aiohttp.ClientError as e:
        logger.exception(f"Client error while updating event data for event_id={event_id}: {str(e)}")
        return False
    except Exception as e:
        logger.exception(f"Unexpected error while updating event data for event_id={event_id}: {str(e)}")
        return False

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@admin_event_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def edit_event_start(message: Message):
    events = await fetch_events()
    if not events:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    builder = ReplyKeyboardBuilder()
    for event in events:
        title = event.get("title")
        builder.button(text=f"‚úèÔ∏è {title}")
    builder.button(text="–ù–∞–∑–∞–¥")
    builder.adjust(1)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_event_router.message(F.text.startswith("‚úèÔ∏è "))
async def edit_event_select(message: Message, state: FSMContext):
    event_title = message.text[2:].strip()
    event = await get_event_by_title(event_title)

    if not event:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        return

    await state.clear()
    await state.set_state(EditEventForm.choosing_field)
    await state.update_data(event=event)

    current_event_text = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {event['info']}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_datetime(event.get('start_date'))}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime(event.get('end_date'))}\n"
        f"–ú–µ—Å—Ç–æ: {event['location']}"
    )

    await message.answer_photo(
        caption=current_event_text,
        photo=event.get("photo", None),
        reply_markup=edit_event_keyboard()
    )


@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
async def edit_event_title(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(EditEventForm.waiting_for_title)

@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
async def edit_event_photo(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EditEventForm.waiting_for_photo)

@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def edit_event_description(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EditEventForm.waiting_for_description)

@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
async def edit_event_info(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏:")
    await state.set_state(EditEventForm.waiting_for_info)

@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞")
async def edit_event_start_date(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    await state.set_state(EditEventForm.waiting_for_start_date)

@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è")
async def edit_event_end_date(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    await state.set_state(EditEventForm.waiting_for_end_date)

@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")
async def edit_event_location(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EditEventForm.waiting_for_location)


@admin_event_router.message(EditEventForm.waiting_for_title)
async def process_event_title(message: Message, state: FSMContext):
    new_title = message.text.strip()
    if not new_title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    data = await state.get_data()
    event = data.get("event")
    if not event:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–±—ã—Ç–∏—é.")
        return
    await update_event(event_id=event["id"], updated_fields={"title": new_title})
    event["title"] = new_title
    await state.update_data(event=event)
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=edit_event_keyboard())
    await state.set_state(EditEventForm.choosing_field)


@admin_event_router.message(EditEventForm.waiting_for_photo)
async def process_event_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    event = data.get("event")
    if not event:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–±—ã—Ç–∏—é.")
        return

    if message.photo:
        photo_file_id = message.photo[-1].file_id
        if message.photo[-1].file_size > 10 * 1024 * 1024:
            await message.answer("–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 10 –ú–ë.")
            return
        await update_event(event_id=event["id"], updated_fields={"photo": photo_file_id})
        event["photo"] = photo_file_id
        await state.update_data(event=event)
        await message.answer("–§–æ—Ç–æ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=edit_event_keyboard())
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    await state.set_state(EditEventForm.choosing_field)

@admin_event_router.message(EditEventForm.waiting_for_description)
async def process_event_description(message: Message, state: FSMContext):
    new_description = message.text.strip()
    if not new_description:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    data = await state.get_data()
    event = data.get("event")
    if not event:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–±—ã—Ç–∏—é.")
        return

    await update_event(event_id=event["id"], updated_fields={"description": new_description})
    event["description"] = new_description
    await state.update_data(event=event)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=edit_event_keyboard())

    await state.set_state(EditEventForm.choosing_field)

@admin_event_router.message(EditEventForm.waiting_for_info)
async def process_event_info(message: Message, state: FSMContext):
    new_info = message.text.strip()
    if not new_info:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return

    data = await state.get_data()
    event = data.get("event")
    if not event:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–±—ã—Ç–∏—é.")
        return

    await update_event(event_id=event["id"], updated_fields={"info": new_info})
    event["info"] = new_info 
    await state.update_data(event=event)
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=edit_event_keyboard())

    await state.set_state(EditEventForm.choosing_field)

@admin_event_router.message(EditEventForm.waiting_for_start_date)
async def process_event_start_date(message: Message, state: FSMContext):
    new_start_date = message.text.strip()
    try:
        start_date = datetime.strptime(new_start_date, "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
        if start_date < datetime.now(timezone.utc):
            await message.answer("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.", reply_markup=cancel_keyboard())
            return

        data = await state.get_data()
        event = data.get("event")
        if not event:
            await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–±—ã—Ç–∏—é.")
            return

        await update_event(event_id=event["id"], updated_fields={"start_date": new_start_date})
        event["start_date"] = new_start_date
        await state.update_data(event=event)
        await message.answer("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=edit_event_keyboard())

        await state.set_state(EditEventForm.choosing_field)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025-07-06 15:30", reply_markup=cancel_keyboard())

@admin_event_router.message(EditEventForm.waiting_for_end_date)
async def process_event_end_date(message: Message, state: FSMContext):
    new_end_date = message.text.strip()
    try:
        end_date = datetime.strptime(new_end_date, "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
        data = await state.get_data()
        event = data.get("event")
        if not event:
            await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–±—ã—Ç–∏—é.")
            return

        start_date_str = event.get("start_date")
        if start_date_str:
            start_date = datetime.strptime(start_date_str, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=timezone.utc)
            if end_date <= start_date:
                await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞.", reply_markup=cancel_keyboard())
                return

        await update_event(event_id=event["id"], updated_fields={"end_date": new_end_date})
        event["end_date"] = new_end_date
        await state.update_data(event=event)
        await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=edit_event_keyboard())

        await state.set_state(EditEventForm.choosing_field)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025-07-06 15:30", reply_markup=cancel_keyboard())

@admin_event_router.message(EditEventForm.waiting_for_location)
async def process_event_location(message: Message, state: FSMContext):
    new_location = message.text.strip()
    if not new_location:
        await message.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return

    data = await state.get_data()
    event = data.get("event")
    if not event:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–±—ã—Ç–∏—é.")
        return

    await update_event(event_id=event["id"], updated_fields={"location": new_location})
    event["location"] = new_location
    await state.update_data(event=event)
    await message.answer("–õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=edit_event_keyboard())

    await state.set_state(EditEventForm.choosing_field)


async def delete_event(event_id: int) -> bool:
    url = f"{url_event}{event_id}/"
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.delete(url, headers=headers) as resp:
                return resp.status in (200, 204)
    except Exception as e:
        logger.error(f"Failed to update event {event_id}: {e}")
        return False


@admin_event_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def delete_event_start(message: Message):
    events = await fetch_events()
    if not events:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    builder = ReplyKeyboardBuilder()
    for event in events:
        title = event.get("title")
        builder.button(text=f"‚ùå {title}")
    builder.button(text="–ù–∞–∑–∞–¥")
    builder.adjust(1)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@admin_event_router.message(F.text.startswith("‚ùå "))
async def delete_event_select(message: Message, state: FSMContext):
    event_title = message.text[2:].strip()
    event = await get_event_by_title(event_title)

    if not event:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        return

    await state.update_data(event=event)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    current_event_text = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {event['info']}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_datetime(event.get('start_date'))}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime(event.get('end_date'))}\n"
        f"–ú–µ—Å—Ç–æ: {event['location']}"
    )

    builder = ReplyKeyboardBuilder()
    builder.button(text="–£–¥–∞–ª–∏—Ç—å")
    builder.button(text="–û—Ç–º–µ–Ω–∞")
    builder.adjust(1)

    await message.answer_photo(
        caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n{current_event_text}\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        photo=event.get("photo", None),
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@admin_event_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å")
async def confirm_delete_event(message: Message, state: FSMContext):
    data = await state.get_data()
    event = data.get("event")

    if not event:
        await message.answer("–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    success = await delete_event(event_id=event["id"])

    if success:
        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=events_management_keyboard())
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=events_management_keyboard())

    await state.clear()