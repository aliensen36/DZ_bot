import aiohttp
import re
import logging
from datetime import datetime, timezone, timedelta
from pydantic import ValidationError
from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ContentType
from aiogram.fsm.context import FSMContext
from data.config import config_settings
from admin.keyboards.admin_reply import events_management_keyboard, admin_keyboard, cancel_keyboard, edit_event_keyboard
from data.url import url_event
from utils.filters import ChatTypeFilter, IsGroupAdmin, ADMIN_CHAT_ID
from utils.dowload_photo import download_photo_from_telegram
from utils.calendar import get_calendar, get_time_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

admin_event_router = Router()
admin_event_router.message.filter(
    ChatTypeFilter("private"),
    IsGroupAdmin([ADMIN_CHAT_ID], show_message=False)
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
URL_PATTERN = re.compile(
    r'^(https?://)?'
    r'([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}'
    r'(:\d+)?'
    r'(/[\w\-._~:/?#[\]@!$&\'()*+,;=]*)?$'
)
MOSCOW_TZ = timezone(timedelta(hours=3))
TIME_PATTERN = re.compile(r'^\s*(\d{1,2}):(\d{2})\s*$')
MAX_PHOTO_SIZE = 10 * 1024 * 1024  # 10MB
ALLOWED_PHOTO_TYPES = ['image/jpeg', 'image/png']

# =================================================================================================
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
# =================================================================================================

class EventForm(StatesGroup):
    waiting_for_title = State()
    waiting_for_photo = State()
    waiting_for_description = State()
    waiting_for_info = State()
    waiting_for_start_date = State()
    waiting_for_start_time = State()
    waiting_for_end_date = State()
    waiting_for_end_time = State()
    waiting_for_location = State()
    waiting_for_url = State()

class EditEventForm(StatesGroup):
    choosing_field = State()
    waiting_for_title = State()
    waiting_for_photo = State()
    waiting_for_description = State()
    waiting_for_info = State()
    waiting_for_start_date = State()
    waiting_for_start_time = State()
    waiting_for_end_date = State()
    waiting_for_end_time = State()
    waiting_for_location = State()
    waiting_for_url = State()

class DeleteEventForm(StatesGroup):
    waiting_for_confirmation = State()

# =================================================================================================
# –£—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =================================================================================================

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É ISO-–¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY HH:MM
def format_datetime(dt_str: str) -> str:
    try:
        dt = datetime.fromisoformat(dt_str.replace("Z", "+03:00"))
        return dt.strftime("%d.%m.%Y %H:%M")
    except Exception as e:
        logger.error(f"Failed to format datetime: {dt_str}, error: {e}")
        return dt_str or "-"

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (—Ñ–æ—Ä–º–∞—Ç JPG/PNG, —Ä–∞–∑–º–µ—Ä –¥–æ 10MB)
async def validate_photo(message: Message) -> tuple[bool, str]:
    if message.content_type != ContentType.PHOTO:
        logger.warning(f"Invalid content type: {message.content_type}")
        return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG."
    if not message.photo:
        logger.warning("No photo received")
        return False, "–§–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    photo = message.photo[-1]
    if photo.file_size > MAX_PHOTO_SIZE:
        logger.warning(f"Photo size {photo.file_size} exceeds limit {MAX_PHOTO_SIZE}")
        return False, "–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë."
    return True, photo.file_id

# =================================================================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
# =================================================================================================

# –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑ API
async def create_new_event(event_data: dict, photo_file_id: str, bot: Bot) -> dict:
    url = f"{url_event}"
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    form_data = aiohttp.FormData()
    for key, value in event_data.items():
        form_data.add_field(key, str(value))

    try:
        photo_content = await download_photo_from_telegram(bot, photo_file_id)
        form_data.add_field(
            "photo",
            photo_content,
            filename=f"event_{datetime.now(MOSCOW_TZ).strftime('%Y%m%d_%H%M%S')}.jpg",
            content_type="image/jpeg"
        )
    except Exception as e:
        logger.error(f"Failed to download photo: {e}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ: {str(e)}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, data=form_data) as response:
                if response.status == 201:
                    logger.info(f"Event created successfully: {event_data['title']}")
                    return await response.json()
                logger.error(f"Failed to create event, status={response.status}, body={await response.text()}")
                return None
    except aiohttp.ClientError as e:
        logger.error(f"Network error creating event: {e}")
        return None

# –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —á–µ—Ä–µ–∑ API
async def fetch_events() -> list:
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(f"{url_event}", headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data
                logger.error(f"Failed to fetch events, status={resp.status}")
                return []
    except aiohttp.ClientError as e:
        logger.error(f"Error fetching events: {e}")
        return []

# –ò—â–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async def get_event_by_title(title: str) -> dict:
    events = await fetch_events()
    for event in events:
        if event.get("title") == title:
            return event
    logger.warning(f"Event with title '{title}' not found")
    return None

# –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑ API
async def update_event(event_id: int, updated_fields: dict, bot: Bot = None) -> dict:
    url = f"{url_event}{event_id}/"
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    form_data = aiohttp.FormData()
    for key, value in updated_fields.items():
        if key == "photo" and value and bot:
            try:
                photo_content = await download_photo_from_telegram(bot, value)
                form_data.add_field(
                    "photo",
                    photo_content,
                    filename=f"event_{event_id}.jpg",
                    content_type="image/jpeg"
                )
            except Exception as e:
                logger.error(f"Failed to download photo for update: {e}")
                raise
        else:
            form_data.add_field(key, str(value))
    try:
        async with aiohttp.ClientSession() as session:
            async with session.patch(url, headers=headers, data=form_data) as response:
                if response.status == 200:
                    logger.info(f"Event {event_id} updated successfully")
                    return await response.json()
                logger.error(f"Failed to update event {event_id}, status={response.status}, body={await response.text()}")
                return None
    except Exception as e:
        logger.error(f"Error updating event {event_id}: {e}")
        return None

# –£–¥–∞–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑ API
async def delete_event(event_id: int) -> bool:
    url = f"{url_event}{event_id}/"
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.delete(url, headers=headers) as resp:
                if resp.status in (200, 204):
                    logger.info(f"Event {event_id} deleted successfully")
                    return True
                logger.error(f"Failed to delete event {event_id}, status={resp.status}")
                return False
    except Exception as e:
        logger.error(f"Error deleting event {event_id}: {e}")
        return False

# =================================================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∏ –æ—Ç–º–µ–Ω—ã
# =================================================================================================

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
@admin_event_router.message(F.text == "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def handle_events(message: Message):
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:",
        reply_markup=events_management_keyboard()
    )

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_event_router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_admin_menu(message: Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=admin_keyboard()
    )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏
@admin_event_router.message(F.text == "–û—Ç–º–µ–Ω–∞", StateFilter(EventForm, EditEventForm, DeleteEventForm))
async def cancel_promotion_action(message: Message, state: FSMContext):
    logger.debug(f"Cancel action requested by user {message.from_user.id} in state {await state.get_state()}")
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=events_management_keyboard()
    )

# =================================================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
# =================================================================================================

# –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def handle_add_event(message: Message, state: FSMContext):
    await state.set_state(EventForm.waiting_for_title)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=cancel_keyboard()
    )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_title))
async def process_event_title(message: Message, state: FSMContext):
    title = message.text.strip()
    if not title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=cancel_keyboard())
        return
    await state.update_data(title=title)
    await state.set_state(EventForm.waiting_for_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=cancel_keyboard())

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_photo))
async def process_event_photo(message: Message, state: FSMContext):
    is_valid, result = await validate_photo(message)
    if not is_valid:
        await message.answer(result, reply_markup=cancel_keyboard())
        return
    photo_file_id = result
    await state.update_data(photo=photo_file_id)
    await state.set_state(EventForm.waiting_for_description)
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=cancel_keyboard())

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_description))
async def process_event_description(message: Message, state: FSMContext):
    description = message.text.strip()
    if not description:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=cancel_keyboard())
        return
    await state.update_data(description=description)
    await state.set_state(EventForm.waiting_for_info)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏:", reply_markup=cancel_keyboard())

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
@admin_event_router.message(StateFilter(EventForm.waiting_for_info))
async def process_event_info(message: Message, state: FSMContext):
    info = message.text.strip()
    if not info:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=cancel_keyboard())
        return
    await state.update_data(info=info)
    await state.set_state(EventForm.waiting_for_start_date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_calendar(prefix="event_"))

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_location))
async def process_event_location(message: Message, state: FSMContext):
    location = message.text.strip()
    if not location:
        await message.answer("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:", reply_markup=cancel_keyboard())
        return
    await state.update_data(location=location)
    await state.set_state(EventForm.waiting_for_url)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=cancel_keyboard())

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏ —Å–æ–∑–¥–∞–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@admin_event_router.message(StateFilter(EventForm.waiting_for_url))
async def process_event_url_and_create(message: Message, state: FSMContext, bot: Bot):
    url = message.text.strip()
    if not url:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:", reply_markup=cancel_keyboard())
        return
    if not URL_PATTERN.match(url):
        logger.warning(f"Invalid URL: {url}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É:", reply_markup=cancel_keyboard())
        return
    await state.update_data(url=url)
    data = await state.get_data()
    event_data = {
        "title": data.get("title"),
        "description": data.get("description"),
        "info": data.get("info"),
        "start_date": data.get("start_datetime").isoformat(),
        "end_date": data.get("end_datetime").isoformat(),
        "location": data.get("location"),
        "url": data.get("url"),
    }
    photo_file_id = data.get("photo")

    try:
        created_event = await create_new_event(event_data, photo_file_id, bot)
        if created_event:
            caption = (
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event_data['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {event_data['description']}\n"
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {event_data['info']}\n"
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_datetime(event_data['start_date'])}\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime(event_data['end_date'])}\n"
                f"–ú–µ—Å—Ç–æ: {event_data['location']}\n"
                f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {event_data['url']}"
            )
            photo_url = created_event.get("photo")
            if photo_url:
                await message.answer_photo(
                    photo=photo_url,
                    caption=caption,
                    parse_mode="Markdown",
                    reply_markup=events_management_keyboard(),
                )
            else:
                await message.answer(caption, reply_markup=events_management_keyboard())
            await state.clear()
        else:
            logger.error(f"Failed to create event: {event_data['title']}")
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=events_management_keyboard()
            )
            await state.clear()
    except Exception as e:
        logger.error(f"Error creating event: {e}")
        await message.answer(
            f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=events_management_keyboard()
        )
        await state.clear()

# =================================================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –≤—Ä–µ–º–µ–Ω–∏
# =================================================================================================

@admin_event_router.callback_query(F.data == "ignore")
async def process_ignore_callback(callback: CallbackQuery):
    logger.debug(f"Ignore callback received from user {callback.from_user.id}")
    await callback.answer()

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
@admin_event_router.message(StateFilter(EventForm.waiting_for_start_date))
async def process_start_date_selection(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_calendar(prefix="event_")
    )

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
@admin_event_router.message(StateFilter(EventForm.waiting_for_end_date))
async def process_end_date_selection(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_calendar(prefix="event_")
    )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@admin_event_router.callback_query(F.data.startswith("event_select_date:"))
async def process_date_callback(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    logger.debug(f"Processing date callback, state={current_state}, callback_data={callback.data}, user_id={callback.from_user.id}")

    date_str = callback.data[len("event_select_date:"):]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    try:
        selected_date = datetime.strptime(date_str, "%d.%m.%Y").replace(tzinfo=MOSCOW_TZ)
        current_time = datetime.now(MOSCOW_TZ)
        if selected_date.date() < current_time.date():
            await callback.message.edit_text(
                "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                reply_markup=get_calendar(prefix="event_")
            )
            await callback.answer()
            return

        current_state = await state.get_state()
        if current_state == EventForm.waiting_for_start_date.state:
            await state.update_data(start_date=selected_date)
            await state.set_state(EventForm.waiting_for_start_time)
            await callback.message.edit_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {date_str}. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
        elif current_state == EventForm.waiting_for_end_date.state:
            data = await state.get_data()
            start_date = data.get("start_date")
            if selected_date.date() < start_date.date():
                logger.warning(f"End date {date_str} before start date")
                await callback.message.edit_text(
                    "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                    reply_markup=get_calendar(prefix="event_")
                )
                await callback.answer()
                return
            await state.update_data(end_date=selected_date)
            await state.set_state(EventForm.waiting_for_end_time)
            await callback.message.edit_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {date_str}. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
        elif current_state == EditEventForm.waiting_for_start_date.state:
            if selected_date.date() < current_time.date():
                await callback.message.edit_text(
                    "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                    reply_markup=get_calendar(prefix="event_")
                )
                await callback.answer()
                return
            await state.update_data(start_date=selected_date)
            await state.set_state(EditEventForm.waiting_for_start_time)
            await callback.message.edit_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {date_str}. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
        elif current_state == EditEventForm.waiting_for_end_date.state:
            data = await state.get_data()
            event = data.get("event")
            start_date = datetime.fromisoformat(event["start_date"].replace("Z", "+03:00")).date()
            if selected_date.date() < start_date:
                logger.warning(f"End date {date_str} before start date")
                await callback.message.edit_text(
                    "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:",
                    reply_markup=get_calendar(prefix="event_")
                )
                await callback.answer()
                return
            await state.update_data(end_date=selected_date)
            await state.set_state(EditEventForm.waiting_for_end_time)
            await callback.message.edit_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {date_str}. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
    except ValueError as e:
        logger.error(f"Invalid date format: {date_str}, error: {e}")
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=get_calendar(prefix="event_")
        )
    except Exception as e:
        logger.error(f"Unexpected error in date callback: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=get_calendar(prefix="event_")
        )
    await callback.answer()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ—Å—è—Ü–∞–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
@admin_event_router.callback_query(F.data.startswith(("event_prev_month:", "event_next_month:")))
async def process_month_navigation(callback: CallbackQuery, state: FSMContext):
    try:
        _, month, year = callback.data.split(":")
        month, year = int(month), int(year)
        calendar_markup = get_calendar(year, month, prefix="event_")
        if not calendar_markup:
            logger.error(f"Failed to generate calendar for month {month}, year {year}")
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_calendar(prefix="event_")
            )
        else:
            await callback.message.edit_reply_markup(reply_markup=calendar_markup)
    except ValueError as e:
        logger.error(f"Invalid month/year: {month}/{year}, error: {e}")
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=get_calendar(prefix="event_")
        )
    except Exception as e:
        logger.error(f"Unexpected error in month navigation: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=get_calendar(prefix="event_")
        )
    await callback.answer()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
@admin_event_router.callback_query(F.data == "event_manual_time")
async def process_manual_time_request(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state in (EventForm.waiting_for_start_time.state, EditEventForm.waiting_for_start_time.state):
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
        )
    elif current_state in (EventForm.waiting_for_end_time.state, EditEventForm.waiting_for_end_time.state):
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
        )
    await callback.answer()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@admin_event_router.callback_query(F.data.startswith("event_select_time:"))
async def process_time_callback(callback: CallbackQuery, state: FSMContext):

    current_state = await state.get_state()
    logger.debug(f"Processing time callback, state={current_state}, callback_data={callback.data}, user_id={callback.from_user.id}")

    time_str = callback.data[len("event_select_time:"):]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    try:
        if len(time_str) == 1 or (len(time_str) == 2 and time_str.isdigit()):
            time_str = f"{time_str.zfill(2)}:00"
        datetime.strptime(time_str, "%H:%M")
        current_state = await state.get_state()
        data = await state.get_data()

        if current_state == EventForm.waiting_for_start_time.state:
            start_date = data.get("start_date")
            start_datetime = datetime.strptime(f"{start_date.strftime('%Y-%m-%d')} {time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=MOSCOW_TZ)
            if start_datetime < datetime.now(MOSCOW_TZ):
                logger.warning(f"Selected past start time: {time_str}")
                await callback.message.edit_text(
                    "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                    reply_markup=get_time_keyboard(prefix="event_")
                )
                await callback.answer()
                return
            await state.update_data(start_datetime=start_datetime)
            await state.set_state(EventForm.waiting_for_end_date)
            await callback.message.edit_text(
                f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ ({time_str}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                reply_markup=get_calendar(prefix="event_")
            )
        elif current_state == EventForm.waiting_for_end_time.state:
            end_date = data.get("end_date")
            end_datetime = datetime.strptime(f"{end_date.strftime('%Y-%m-%d')} {time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=MOSCOW_TZ)
            start_datetime = data.get("start_datetime")
            if end_datetime <= start_datetime:
                logger.warning(f"End time {time_str} not after start time")
                await callback.message.edit_text(
                    "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                    reply_markup=get_time_keyboard(prefix="event_")
                )
                await callback.answer()
                return
            await state.update_data(end_datetime=end_datetime)
            await state.set_state(EventForm.waiting_for_location)
            await callback.message.edit_text(
                f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è ({time_str}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            )
        elif current_state == EditEventForm.waiting_for_start_time.state:
            start_date = data.get("start_date")
            start_datetime = datetime.strptime(f"{start_date.strftime('%Y-%m-%d')} {time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=MOSCOW_TZ)
            if start_datetime < datetime.now(MOSCOW_TZ):
                logger.warning(f"Selected past start time: {time_str}")
                await callback.message.edit_text(
                    "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                    reply_markup=get_time_keyboard(prefix="event_")
                )
                await callback.answer()
                return
            event = data.get("event")
            updated_event = await update_event(
                event_id=event["id"],
                updated_fields={"start_date": start_datetime.isoformat()},
                bot=None
            )
            if updated_event:
                logger.info(f"Event {event['id']} start_date updated to {start_datetime.isoformat()}")
                event["start_date"] = updated_event.get("start_date", start_datetime.isoformat())
                end_datetime = datetime.fromisoformat(event["end_date"].replace("Z", "+03:00"))
                if end_datetime <= start_datetime:
                    logger.warning(f"End date {end_datetime} not after new start date {start_datetime}")
                    await callback.message.edit_text(
                        "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                        reply_markup=get_calendar(prefix="event_")
                    )
                    await state.set_state(EditEventForm.waiting_for_end_date)
                    await state.update_data(start_datetime=start_datetime, end_date=end_datetime)
                    await callback.answer()
                    return
                await state.update_data(event=updated_event)
                await callback.message.delete()
                await callback.message.answer(
                    f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {start_datetime.strftime('%d.%m.%Y %H:%M')}.",
                    reply_markup=edit_event_keyboard()
                )
                await state.set_state(EditEventForm.choosing_field)
            else:
                logger.error(f"Failed to update start time for event {event['id']}")
                await callback.message.edit_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                    reply_markup=get_time_keyboard(prefix="event_")
                )
        elif current_state == EditEventForm.waiting_for_end_time.state:
            end_date = data.get("end_date")
            end_datetime = datetime.strptime(f"{end_date.strftime('%Y-%m-%d')} {time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=MOSCOW_TZ)
            event = data.get("event")
            start_datetime = datetime.fromisoformat(event["start_date"].replace("Z", "+03:00"))
            if end_datetime <= start_datetime:
                logger.warning(f"End time {time_str} not after start time")
                await callback.message.edit_text(
                    "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                    reply_markup=get_time_keyboard(prefix="event_")
                )
                await callback.answer()
                return
            updated_event = await update_event(
                event_id=event["id"],
                updated_fields={"end_date": end_datetime.isoformat()},
                bot=None
            )
            if updated_event:
                logger.info(f"Event {event['id']} end_date updated to {end_datetime.isoformat()}")
                event["end_date"] = updated_event.get("end_date", end_datetime.isoformat())
                await state.update_data(event=updated_event)
                await callback.message.delete()
                await callback.message.answer(
                    f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {end_datetime.strftime('%d.%m.%Y %H:%M')}.",
                    reply_markup=edit_event_keyboard()
                )
                await state.set_state(EditEventForm.choosing_field)
            else:
                logger.error(f"Failed to update end time for event {event['id']}")
                await callback.message.edit_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                    reply_markup=get_time_keyboard(prefix="event_")
                )
    except ValueError as e:
        logger.error(f"Invalid time format: {time_str}, error: {e}")
        await callback.message.edit_text(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00):",
            reply_markup=get_time_keyboard(prefix="event_")
        )
    except (ValidationError, TelegramBadRequest) as e:
        logger.error(f"Error processing time callback: {e}")
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ '{time_str}'. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00):",
            reply_markup=get_time_keyboard(prefix="event_")
        )
    except Exception as e:
        logger.error(f"Unexpected error in time callback: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=get_time_keyboard(prefix="event_")
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(EventForm.waiting_for_start_time)
async def process_manual_start_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    match = TIME_PATTERN.match(time_str)
    if not match:
        logger.warning(f"User {message.from_user.id} provided invalid time format: {time_str}")
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
            reply_markup=get_time_keyboard(prefix="event_")
        )
        return

    try:
        hours, minutes = map(int, match.groups())
        if hours > 23 or minutes > 59:
            logger.warning(f"User {message.from_user.id} provided out-of-range time: {time_str}")
            await message.answer(
                "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
            return
        time_str = f"{hours:02d}:{minutes:02d}"
        data = await state.get_data()
        start_date = data.get("start_date")
        start_datetime = datetime.strptime(f"{start_date.strftime('%Y-%m-%d')} {time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=MOSCOW_TZ)
        
        if start_datetime < datetime.now(MOSCOW_TZ):
            logger.warning(f"User {message.from_user.id} selected past start time: {time_str}")
            await message.answer(
                "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
            return
        
        await state.update_data(start_datetime=start_datetime)
        await state.set_state(EventForm.waiting_for_end_date)
        await message.answer(
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ ({time_str}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
            reply_markup=get_calendar(prefix="event_")
        )
    except ValueError:
        logger.error(f"User {message.from_user.id} provided invalid time format: {time_str}")
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
            reply_markup=get_time_keyboard(prefix="event_")
        )

@admin_event_router.message(EventForm.waiting_for_end_time)
async def process_manual_end_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    match = TIME_PATTERN.match(time_str)
    if not match:
        logger.warning(f"User {message.from_user.id} provided invalid time format: {time_str}")
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
            reply_markup=get_time_keyboard(prefix="event_")
        )
        return

    try:
        hours, minutes = map(int, match.groups())
        if hours > 23 or minutes > 59:
            logger.warning(f"User {message.from_user.id} provided out-of-range time: {time_str}")
            await message.answer(
                "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
            return
        time_str = f"{hours:02d}:{minutes:02d}"
        data = await state.get_data()
        end_date = data.get("end_date")
        end_datetime = datetime.strptime(f"{end_date.strftime('%Y-%m-%d')} {time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=MOSCOW_TZ)
        start_datetime = data.get("start_datetime")
        
        if end_datetime <= start_datetime:
            logger.warning(f"User {message.from_user.id} selected end time {time_str} not after start time")
            await message.answer(
                "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
            return
        
        await state.update_data(end_datetime=end_datetime)
        await state.set_state(EventForm.waiting_for_location)
        await message.answer(
            f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è ({time_str}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
        )
    except ValueError:
        logger.error(f"User {message.from_user.id} provided invalid time format: {time_str}")
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
            reply_markup=get_time_keyboard(prefix="event_")
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(EditEventForm.waiting_for_start_time)
async def process_manual_edit_start_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    match = TIME_PATTERN.match(time_str)
    if not match:
        logger.warning(f"User {message.from_user.id} provided invalid time format: {time_str}")
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
            reply_markup=get_time_keyboard(prefix="event_")
        )
        return

    try:
        hours, minutes = map(int, match.groups())
        if hours > 23 or minutes > 59:
            logger.warning(f"User {message.from_user.id} provided out-of-range time: {time_str}")
            await message.answer(
                "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
            return
        time_str = f"{hours:02d}:{minutes:02d}"
        data = await state.get_data()
        start_date = data.get("start_date")
        start_datetime = datetime.strptime(f"{start_date.strftime('%Y-%m-%d')} {time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=MOSCOW_TZ)
        
        if start_datetime < datetime.now(MOSCOW_TZ):
            logger.warning(f"User {message.from_user.id} selected past start time: {time_str}")
            await message.answer(
                "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
            return
        
        event = data.get("event")
        updated_event = await update_event(
            event_id=event["id"],
            updated_fields={"start_date": start_datetime.isoformat()},
            bot=None
        )
        if updated_event:
            end_datetime = datetime.fromisoformat(event["end_date"].replace("Z", "+03:00"))
            if end_datetime <= start_datetime:
                logger.warning(f"User {message.from_user.id} set end date {end_datetime} not after new start date {start_datetime}")
                await message.answer(
                    "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                    reply_markup=get_calendar(prefix="event_")
                )
                await state.set_state(EditEventForm.waiting_for_end_date)
                await state.update_data(start_datetime=start_datetime, end_date=end_datetime)
                return
            
            await state.update_data(event=updated_event)
            text = (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {updated_event['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {updated_event['description']}\n"
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {updated_event['info']}\n"
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_datetime(updated_event.get('start_date'))}\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime(updated_event.get('end_date'))}\n"
                f"–ú–µ—Å—Ç–æ: {updated_event['location']}\n"
                f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {updated_event.get('url')}"
            )
            photo_url = updated_event.get("photo")
            if photo_url:
                try:
                    await message.answer_photo(
                        photo=photo_url,
                        caption=text,
                        parse_mode="Markdown",
                        reply_markup=edit_event_keyboard()
                    )
                except Exception as e:
                    logger.error(f"Failed to send photo for event {event['id']}: {e}")
                    await message.answer(
                        text + "\n\n(–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
                        parse_mode="Markdown",
                        reply_markup=edit_event_keyboard()
                    )
            else:
                await message.answer(
                    text + "\n\n(–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)",
                    parse_mode="Markdown",
                    reply_markup=edit_event_keyboard()
                )
            await state.set_state(EditEventForm.choosing_field)
        else:
            logger.error(f"Failed to update start time for event {event['id']}")
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
    except ValueError:
        logger.error(f"User {message.from_user.id} provided invalid time format: {time_str}")
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
            reply_markup=get_time_keyboard(prefix="event_")
        )

@admin_event_router.message(EditEventForm.waiting_for_end_time)
async def process_manual_edit_end_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    match = TIME_PATTERN.match(time_str)
    if not match:
        logger.warning(f"User {message.from_user.id} provided invalid time format: {time_str}")
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
            reply_markup=get_time_keyboard(prefix="event_")
        )
        return

    try:
        hours, minutes = map(int, match.groups())
        if hours > 23 or minutes > 59:
            logger.warning(f"User {message.from_user.id} provided out-of-range time: {time_str}")
            await message.answer(
                "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
            return
        time_str = f"{hours:02d}:{minutes:02d}"
        data = await state.get_data()
        end_date = data.get("end_date")
        end_datetime = datetime.strptime(f"{end_date.strftime('%Y-%m-%d')} {time_str}", "%Y-%m-%d %H:%M").replace(tzinfo=MOSCOW_TZ)
        event = data.get("event")
        start_datetime = datetime.fromisoformat(event["start_date"].replace("Z", "+03:00"))
        
        if end_datetime <= start_datetime:
            logger.warning(f"User {message.from_user.id} selected end time {time_str} not after start time")
            await message.answer(
                "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
            return
        
        updated_event = await update_event(
            event_id=event["id"],
            updated_fields={"end_date": end_datetime.isoformat()},
            bot=None
        )
        if updated_event:
            await state.update_data(event=updated_event)
            text = (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {updated_event['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {updated_event['description']}\n"
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {updated_event['info']}\n"
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_datetime(updated_event.get('start_date'))}\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime(updated_event.get('end_date'))}\n"
                f"–ú–µ—Å—Ç–æ: {updated_event['location']}\n"
                f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {updated_event.get('url')}"
            )
            photo_url = updated_event.get("photo")
            if photo_url:
                try:
                    await message.answer_photo(
                        photo=photo_url,
                        caption=text,
                        parse_mode="Markdown",
                        reply_markup=edit_event_keyboard()
                    )
                except Exception as e:
                    logger.error(f"Failed to send photo for event {event['id']}: {e}")
                    await message.answer(
                        text + "\n\n(–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
                        parse_mode="Markdown",
                        reply_markup=edit_event_keyboard()
                    )
            else:
                await message.answer(
                    text + "\n\n(–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)",
                    parse_mode="Markdown",
                    reply_markup=edit_event_keyboard()
                )
            await state.set_state(EditEventForm.choosing_field)
        else:
            logger.error(f"Failed to update end time for event {event['id']}")
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_time_keyboard(prefix="event_")
            )
    except ValueError:
        logger.error(f"User {message.from_user.id} provided invalid time format: {time_str}")
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):",
            reply_markup=get_time_keyboard(prefix="event_")
        )

# =================================================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
# =================================================================================================

# –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def edit_event_start(message: Message):
    events = await fetch_events()
    if not events:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    builder = ReplyKeyboardBuilder()
    for event in events:
        title = event.get("title")
        builder.button(text=f"‚úèÔ∏è {title}")
    builder.button(text="–ù–∞–∑–∞–¥")
    builder.adjust(1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_event_router.message(F.text.startswith("‚úèÔ∏è "))
async def edit_event_select(message: Message, state: FSMContext):
    event_title = message.text[2:].strip()
    event = await get_event_by_title(event_title)
    if not event:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        return
    await state.clear()
    await state.set_state(EditEventForm.choosing_field)
    await state.update_data(event=event)
    current_event_text = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {event['info']}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_datetime(event.get('start_date'))}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime(event.get('end_date'))}\n"
        f"–ú–µ—Å—Ç–æ: {event['location']}\n"
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {event.get('url')}"
    )
    photo_url = event.get("photo")
    if photo_url:
        try:
            await message.answer_photo(
                photo=photo_url,
                caption=current_event_text,
                parse_mode="Markdown",
                reply_markup=edit_event_keyboard()
            )
        except Exception as e:
            logger.error(f"Failed to send photo for event {event['id']}: {e}")
            await message.answer(
                current_event_text + "\n\n(–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
                reply_markup=edit_event_keyboard()
            )
    else:
        await message.answer(
            current_event_text + "\n\n(–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)",
            reply_markup=edit_event_keyboard()
        )

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
async def edit_event_title(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=cancel_keyboard())
    await state.set_state(EditEventForm.waiting_for_title)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
async def edit_event_photo(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:", reply_markup=cancel_keyboard())
    await state.set_state(EditEventForm.waiting_for_photo)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def edit_event_description(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=cancel_keyboard())
    await state.set_state(EditEventForm.waiting_for_description)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
async def edit_event_info(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=cancel_keyboard())
    await state.set_state(EditEventForm.waiting_for_info)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞")
async def edit_event_start_date(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞:", reply_markup=get_calendar(prefix="event_"))
    await state.set_state(EditEventForm.waiting_for_start_date)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è")
async def edit_event_end_date(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:", reply_markup=get_calendar(prefix="event_"))
    await state.set_state(EditEventForm.waiting_for_end_date)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")
async def edit_event_location(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é:", reply_markup=cancel_keyboard())
    await state.set_state(EditEventForm.waiting_for_location)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_event_router.message(EditEventForm.choosing_field, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def edit_event_url(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:", reply_markup=cancel_keyboard())
    await state.set_state(EditEventForm.waiting_for_url)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(EditEventForm.waiting_for_title)
async def process_event_title(message: Message, state: FSMContext):
    new_title = message.text.strip()
    if not new_title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=cancel_keyboard())
        return
    data = await state.get_data()
    event = data.get("event")
    if not event:
        logger.error(f"No event data found")
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.", reply_markup=events_management_keyboard())
        await state.clear()
        return
    updated_event = await update_event(event_id=event["id"], updated_fields={"title": new_title}, bot=None)
    if updated_event:
        logger.info(f"Event {event['id']} title updated to '{new_title}'")
        event["title"] = new_title
        await state.update_data(event=event)
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=edit_event_keyboard())
        await state.set_state(EditEventForm.choosing_field)
    else:
        logger.error(f"Failed to update title for event {event['id']}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=edit_event_keyboard())

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(EditEventForm.waiting_for_photo)
async def process_event_photo(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    event = data.get("event")
    if not event:
        logger.error(f"No event data found")
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.", reply_markup=events_management_keyboard())
        await state.clear()
        return
    is_valid, result = await validate_photo(message)
    if not is_valid:
        await message.answer(result, reply_markup=cancel_keyboard())
        return
    photo_file_id = result
    updated_event = await update_event(event_id=event["id"], updated_fields={"photo": photo_file_id}, bot=bot)
    if updated_event and isinstance(updated_event, dict):
        logger.info(f"Photo updated for event {event['id']}")
        event["photo"] = updated_event.get("photo")
        await state.update_data(event=event)
        await message.answer("–§–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=edit_event_keyboard())
        await state.set_state(EditEventForm.choosing_field)
    else:
        logger.error(f"Failed to update photo for event {event['id']}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=cancel_keyboard())

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(EditEventForm.waiting_for_description)
async def process_event_description(message: Message, state: FSMContext):
    new_description = message.text.strip()
    if not new_description:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=cancel_keyboard())
        return
    data = await state.get_data()
    event = data.get("event")
    if not event:
        logger.error(f"No event data found")
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.", reply_markup=events_management_keyboard())
        await state.clear()
        return
    updated_event = await update_event(event_id=event["id"], updated_fields={"description": new_description}, bot=None)
    if updated_event:
        logger.info(f"Description updated for event {event['id']}")
        event["description"] = new_description
        await state.update_data(event=event)
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=edit_event_keyboard())
        await state.set_state(EditEventForm.choosing_field)
    else:
        logger.error(f"Failed to update description for event {event['id']}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=edit_event_keyboard())

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
@admin_event_router.message(EditEventForm.waiting_for_info)
async def process_event_info(message: Message, state: FSMContext):
    new_info = message.text.strip()
    if not new_info:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.", reply_markup=cancel_keyboard())
        return
    data = await state.get_data()
    event = data.get("event")
    if not event:
        logger.error(f"No event data found")
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.", reply_markup=events_management_keyboard())
        await state.clear()
        return
    updated_event = await update_event(event_id=event["id"], updated_fields={"info": new_info}, bot=None)
    if updated_event:
        logger.info(f"Info updated for event {event['id']}")
        event["info"] = new_info
        await state.update_data(event=event)
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=edit_event_keyboard())
        await state.set_state(EditEventForm.choosing_field)
    else:
        logger.error(f"Failed to update info for event {event['id']}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=edit_event_keyboard())

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(EditEventForm.waiting_for_location)
async def process_event_location(message: Message, state: FSMContext):
    new_location = message.text.strip()
    if not new_location:
        await message.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.", reply_markup=cancel_keyboard())
        return
    data = await state.get_data()
    event = data.get("event")
    if not event:
        logger.error(f"No event data found")
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.", reply_markup=events_management_keyboard())
        await state.clear()
        return
    updated_event = await update_event(event_id=event["id"], updated_fields={"location": new_location}, bot=None)
    if updated_event:
        logger.info(f"Location updated for event {event['id']}")
        event["location"] = new_location
        await state.update_data(event=event)
        await message.answer("–õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=edit_event_keyboard())
        await state.set_state(EditEventForm.choosing_field)
    else:
        logger.error(f"Failed to update location for event {event['id']}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=edit_event_keyboard())

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(EditEventForm.waiting_for_url)
async def process_event_url(message: Message, state: FSMContext):
    new_url = message.text.strip()
    if not new_url:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.", reply_markup=cancel_keyboard())
        return
    if not URL_PATTERN.match(new_url):
        logger.warning(f"Invalid URL: {new_url}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É:", reply_markup=cancel_keyboard())
        return
    data = await state.get_data()
    event = data.get("event")
    if not event:
        logger.error(f"No event data found")
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.", reply_markup=events_management_keyboard())
        await state.clear()
        return
    updated_event = await update_event(event_id=event["id"], updated_fields={"url": new_url}, bot=None)
    if updated_event:
        logger.info(f"URL updated for event {event['id']}")
        event["url"] = new_url
        await state.update_data(event=event)
        await message.answer("–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=edit_event_keyboard())
        await state.set_state(EditEventForm.choosing_field)
    else:
        logger.error(f"Failed to update URL for event {event['id']}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=edit_event_keyboard())

# –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def delete_event_start(message: Message):
    events = await fetch_events()
    if not events:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    builder = ReplyKeyboardBuilder()
    for event in events:
        title = event.get("title")
        builder.button(text=f"‚ùå {title}")
    builder.button(text="–ù–∞–∑–∞–¥")
    builder.adjust(1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@admin_event_router.message(F.text.startswith("‚ùå "))
async def delete_event_select(message: Message, state: FSMContext):
    event_title = message.text[2:].strip()
    event = await get_event_by_title(event_title)
    if not event:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
        return
    await state.update_data(event=event)
    await state.set_state(DeleteEventForm.waiting_for_confirmation)
    current_event_text = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {event['info']}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_datetime(event.get('start_date'))}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime(event.get('end_date'))}\n"
        f"–ú–µ—Å—Ç–æ: {event['location']}"
    )
    builder = ReplyKeyboardBuilder()
    builder.button(text="–£–¥–∞–ª–∏—Ç—å")
    builder.button(text="–û—Ç–º–µ–Ω–∞")
    builder.adjust(1)
    photo_url = event.get("photo")
    if photo_url:
        try:
            await message.answer_photo(
                photo=photo_url,
                caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n{current_event_text}\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
                parse_mode="Markdown",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
        except Exception as e:
            logger.error(f"Failed to send photo for event {event['id']}: {e}")
            await message.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n{current_event_text}\n\n(–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
    else:
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\n{current_event_text}\n\n(–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_event_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å", StateFilter(DeleteEventForm.waiting_for_confirmation))
async def confirm_delete_event(message: Message, state: FSMContext):
    data = await state.get_data()
    event = data.get("event")
    if not event:
        logger.error(f"No event data found")
        await message.answer("–û—à–∏–±–∫–∞: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    success = await delete_event(event_id=event["id"])
    if success:
        logger.info(f"Event {event['id']} deleted")
        await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=events_management_keyboard())
    else:
        logger.error(f"Failed to delete event {event['id']}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=events_management_keyboard())
    await state.clear()