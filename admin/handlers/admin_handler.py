import logging
from urllib.parse import urlparse
import aiohttp
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from openpyxl.styles import Alignment, Font, PatternFill, Border, Side
from aiohttp import ClientError, ClientConnectionError, ServerTimeoutError
import socket
from admin.keyboards.admin_reply import admin_keyboard
import pandas as pd
from io import BytesIO
from datetime import datetime as dt

from client.keyboards.reply import main_kb
from data.url import url_users
from data.config import config_settings
from utils.filters import ChatTypeFilter, IsGroupAdmin, ADMIN_CHAT_ID

logger = logging.getLogger(__name__)

BOT_API_KEY = config_settings.bot_api_key.get_secret_value()


admin_router = Router()
admin_router.message.filter(
    ChatTypeFilter("private"),
    IsGroupAdmin(ADMIN_CHAT_ID, show_message=True)
)


async def generate_excel_report():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    if not BOT_API_KEY:
        logger.error("BOT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return None

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(
                    url_users,
                    headers={'X-API-Key': BOT_API_KEY}
            ) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {resp.status}, {error_text}")
                    return None
                users = await resp.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

    if not users:
        return None

    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    columns_to_drop = ['id', 'password']  # –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    df = pd.DataFrame(users).drop(columns=columns_to_drop, errors='ignore')

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫ –ø–æ–ª—è–º
    bool_columns = ['is_bot', 'is_staff', 'is_active', 'is_superuser']
    for col in bool_columns:
        if col in df.columns:
            df[col] = df[col].apply(lambda x: '–î–∞' if x else '–ù–µ—Ç')

    datetime_columns = ['date_joined', 'last_activity']
    for col in datetime_columns:
        if col in df.columns:
            df[col] = df[col].apply(
                lambda x: x[:19].replace('T', ' ') if isinstance(x, str) else None
            )

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    column_mapping = {
        'tg_id': 'TG ID',
        'username': '–ù–∏–∫–Ω–µ–π–º',
        'first_name': '–ò–º—è',
        'last_name': '–§–∞–º–∏–ª–∏—è',
        'is_bot': '–ë–æ—Ç',
        'date_joined': '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        'last_activity': '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        'is_staff': '–ê–¥–º–∏–Ω',
        'is_active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
        'is_superuser': '–°—É–ø–µ—Ä—é–∑–µ—Ä'
    }
    df.rename(columns=column_mapping, inplace=True)

    # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        worksheet = writer.sheets['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        alignment = Alignment(horizontal='left', vertical='center', wrap_text=True)
        for row in worksheet.iter_rows():
            for cell in row:
                cell.alignment = alignment

        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2) * 1.2
            worksheet.column_dimensions[column_letter].width = adjusted_width

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_font = Font(bold=True)
        header_fill = PatternFill(start_color='F2F2F2', end_color='F2F2F2', fill_type='solid')
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )

        for cell in worksheet[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.border = thin_border
            cell.alignment = Alignment(horizontal='center', vertical='center')

    output.seek(0)
    return output


@admin_router.message(Command("admin"))
async def admin_panel(message: Message, bot: Bot):
    user_id = message.from_user.id
    await message.answer(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        reply_markup=admin_keyboard()
    )


@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        try:
            parsed_url = urlparse(url_users)
            host = parsed_url.hostname
            port = parsed_url.port or (80 if parsed_url.scheme == 'http' else 443)
            with socket.create_connection((host, port), timeout=3):
                pass
        except (socket.timeout, ConnectionRefusedError, OSError) as e:
            logger.error(f"–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            await message.answer("üî¥ –°–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            return

        if not BOT_API_KEY:
            logger.error("BOT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            return

        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            try:
                async with session.get(
                    url_users,
                    headers={'X-API-Key': BOT_API_KEY}
                ) as resp:
                    if resp.status != 200:
                        error_text = await resp.text()
                        logger.error(f"API error {resp.status}: {error_text}")
                        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {resp.status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
                    try:
                        users = await resp.json()
                    except ValueError as e:
                        logger.error(f"Invalid JSON response: {e}")
                        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞")
                        return
            except ServerTimeoutError as e:
                logger.error(f"Timeout error: {e}")
                await message.answer("‚è≥ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            except ClientConnectionError as e:
                logger.error(f"Connection error: {e}")
                await message.answer("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
                return
            except ClientError as e:
                logger.error(f"Client error: {e}")
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É")
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        total_users = len(users)
        active_users = sum(1 for user in users if user.get('is_active', False))

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel",
            callback_data="export_users_excel"
        ))

        await message.answer(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{total_users}</code>\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <code>{active_users}</code>",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"Unexpected error in show_statistics: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.callback_query(F.data == "export_users_excel")
async def export_users_excel(callback: CallbackQuery):
    try:
        await callback.answer("‚è≥ –ì–æ—Ç–æ–≤–∏–º –æ—Ç—á–µ—Ç...")
        excel_file = await generate_excel_report()

        if excel_file:
            await callback.message.answer_document(
                BufferedInputFile(
                    excel_file.getvalue(),
                    filename=f"users_report_{dt.now().strftime('%Y%m%d_%H%M%S')}.xlsx"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º dt –≤–º–µ—Å—Ç–æ datetime
                ),
                caption="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            )
        else:
            await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏")
    except Exception as e:
        logger.error(f"Error in export_users_excel: {e}", exc_info=True)
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
    finally:
        await callback.answer()


@admin_router.message(F.text == "üö™ –í—ã—Ö–æ–¥")
async def exit_admin_panel(message: Message):
    await message.answer(
        "–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
        reply_markup=main_kb
    )
