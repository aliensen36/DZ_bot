import logging

import aiohttp
from aiogram import Router, types, F
from aiogram.types import Message as AiogramMessage, Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import CommandStart
from aiohttp import ClientConnectorError, ServerTimeoutError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from data.config import config_settings
from data.url import url_users, url_subscription
from client.keyboards.reply import main_kb
from client.keyboards.inline import build_interests_keyboard, get_subscriptions_name
from client.services.subscriptions import get_subscriptions_data

logger = logging.getLogger(__name__)

start_router = Router()


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã
class Form(StatesGroup):
    choosing = State()


async def send_new_user_notification(bot, user_data: dict, referral_code: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = (
            "üéâ *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–æ—Ç–µ!*\n\n"
            f"*ID:* `{user_data['tg_id']}`\n"
            f"*–ò–º—è:* {user_data['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–§–∞–º–∏–ª–∏—è:* {user_data['last_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"*Username:* @{user_data['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        )

        user_info += f"*–ë–æ—Ç:* {'–î–∞' if user_data['is_bot'] else '–ù–µ—Ç'}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        await bot.send_message(
            chat_id=config_settings.ADMIN_CHAT_ID,
            text=user_info
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É: {user_data['tg_id']}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É: {e}")


@start_router.message(CommandStart())
async def cmd_start(message: AiogramMessage, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /start.

    Notes:
        –í—ã–ø–æ–ª–Ω—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ (200 –∏–ª–∏ 201).
    """
    await state.clear()
    parts = message.text.split()
    referral_code = parts[1] if len(parts) > 1 else None
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ API
    user_data = {
        "tg_id": message.from_user.id,
        "first_name": message.from_user.first_name or "",
        "last_name": message.from_user.last_name or "",
        "username": message.from_user.username or "",
        "is_bot": message.from_user.is_bot,
        "referral_code_used": referral_code if referral_code else None
    }

    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            try:
                async with session.post(
                        url_users,
                        json=user_data,
                        headers={"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
                ) as resp:
                    response_data = await resp.json()

                    # 201 ‚Äî –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
                    # 200 ‚Äî —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
                    if resp.status in (200, 201):
                        greeting_name = response_data.get('first_name', message.from_user.first_name)

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                        if resp.status == 201:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                            await send_new_user_notification(message.bot, user_data, referral_code)
                            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                            greeting_text = (
                                "<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n\n"
                                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ê—Ä—Ç-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ üéâ</b>\n\n"
                                "–ß—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –í–∞–º —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏–∑ –∂–∏–∑–Ω–∏ –ê—Ä—Ç-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –æ—Ç–º–µ—Ç—å—Ç–µ, —á—Ç–æ –í–∞–º –±–ª–∏–∂–µ üíõ"
                            )

                            await state.set_state(Form.choosing)
                            await state.update_data(selected=[])

                            await message.answer(
                                greeting_text,
                                reply_markup = await build_interests_keyboard([])
                            )

                        elif resp.status == 200:
                            greeting_text = "–†–∞–¥—ã —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –±–æ—Ç–µ –ê—Ä—Ç-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ ‚ù§"

                            await message.answer(
                                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{greeting_name}</b>!\n\n"
                                f"{greeting_text}",
                                reply_markup=main_kb
                            )

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                    else:
                        error_msg = response_data.get('detail', '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                        logger.error(f"API error {resp.status}: {error_msg}")
                        await message.answer(
                            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.first_name}</b>!\n"
                            f"‚ö†Ô∏è {error_msg}\n\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                        )

            except ServerTimeoutError:
                logger.error("–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
                await message.answer(
                    f"‚è≥ <b>{message.from_user.first_name}</b>, —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )

            except ClientConnectorError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
                await message.answer(
                    f"üîå <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏</b>\n\n"
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.first_name}</b>!\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.\n\n"
                    "üõ†Ô∏è –ú—ã —É–∂–µ —Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É!\n"
                    "üïí –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15-20 –º–∏–Ω—É—Ç."
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                await message.answer(
                    f"üåÄ <b>–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.first_name}</b>!\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n\n"
                    "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º."
                )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer(
            f"üëã <b>{message.from_user.first_name}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.",
            reply_markup=main_kb
        )


@start_router.callback_query(Form.choosing)
async def process_choice(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–ø–æ–¥–ø–∏—Å–æ–∫) —á–µ—Ä–µ–∑ callback-–∫–Ω–æ–ø–∫–∏.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–ø–∏—Å–∞–Ω–∏–µ:
        - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" ("done"):
            - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
            - –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞.
            - –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
            - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∏–∫–æ–Ω–∫–æ–π –º–µ–Ω—é.
            - –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å:
            - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
            - –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
            - –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.
        - –í –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å.
    """

    data = await state.get_data()
    selected = data.get("selected", [])

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ API
    available_options = await get_subscriptions_name()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ì–æ—Ç–æ–≤–æ" ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    if callback.data == "done":
        if not selected:
            await callback.answer("–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏!")
            return
        
        try:
            subscriptions = await get_subscriptions_data()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å: {–Ω–∞–∑–≤–∞–Ω–∏–µ: id}
            name_to_id = {sub["name"]: sub["id"] for sub in subscriptions}

            headers = {
                "X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()
            }

            user_id = str(callback.from_user.id)
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                for name in selected:
                    subscription_id = name_to_id.get(name)
                    if not subscription_id:
                        continue

                    async with session.post(
                        url=f"{url_subscription}{subscription_id}/subscribe/",
                        headers=headers,
                        json={"tg_id": user_id}
                    ) as response:
                        if response.status != 200:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ {name}: {response.status}")
        except Exception as e:
            logger.exception("–°–±–æ–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫")

        interests_text = (
            "–°—É–ø–µ—Ä! –ú—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. "
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫ –∑–¥–µ—Å—å –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ."
        )

        await callback.message.answer(
            text=interests_text,
            parse_mode="HTML",
            reply_markup=main_kb
        )
        await state.clear()
        return

    if callback.data in available_options:
        if callback.data in selected:
            selected.remove(callback.data)
        else:
            selected.append(callback.data)

        await state.update_data(selected=selected)

        new_markup = await build_interests_keyboard(selected)

        if callback.message.reply_markup != new_markup:
            await callback.message.edit_reply_markup(reply_markup=new_markup)

    await callback.answer()


@start_router.message(F.text == "/help")
async def help_command(message: AiogramMessage):
    help_text = (
    "üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!* –Ø –ø–æ–º–æ–≥—É –í–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n\n"
    "*–ß—Ç–æ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:*\n\n"
    "‚ñ´Ô∏è */start* ‚Äî *–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ*, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n\n"
    "‚ñ´Ô∏è *–ó–∞–π—Ç–∏ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
    "‚ÄÉ‚ÄÉ‚ñ™Ô∏è *–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ* ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.\n"
    "‚ÄÉ‚ÄÉ‚ñ™Ô∏è *–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.\n"
    "‚ÄÉ‚ÄÉ‚ñ™Ô∏è *–ú–æ–∏ –±–æ–Ω—É—Å—ã* ‚Äî —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤ –í—ã —É–∂–µ –Ω–∞–∫–æ–ø–∏–ª–∏.\n\n"
    "‚ñ´Ô∏è *–ù–∞–∂–∞—Ç—å ¬´–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª*, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ Mini-App *–ê—Ä—Ç-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞* ‚Äî "
    "—Ç–∞–º –í–∞—Å –∂–¥—É—Ç *–∞—Ñ–∏—à–∞ —Å–æ–±—ã—Ç–∏–π*, *—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã*, *–∫–≤–µ—Å—Ç—ã* –∏ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ *–Ω–∞—à–∏—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞—Ö*.\n"
    "–ê —Ç–∞–∫–∂–µ –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã, –ø–æ–¥–∞—Ä–∫–∏ –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã! ü§©"
    )
    
    await message.answer(help_text, parse_mode="Markdown")

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Ä–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
@start_router.message(F.text == "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
async def send_webapp_button(message: Message):
    webapp_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url="https://frontend-tau-fawn-68.vercel.app")
            )]
        ]
    )
    await message.answer(
        "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=webapp_kb
    )