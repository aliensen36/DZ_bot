import logging
import re
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiohttp

from data.url import url_loyalty, url_users

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
name_pattern = re.compile(r"^[–ê-–Ø–∞-—èA-Za-z—ë–Å\-]{2,}$")
email_pattern = re.compile(r"^[\w\.-]+@[\w\.-]+\.\w{2,}$")

logger = logging.getLogger(__name__)

loyalty_router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class LoyaltyCardForm(StatesGroup):
    last_name = State()
    first_name = State()
    birth_date = State()
    email = State()

# –ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã
async def fetch_loyalty_card(user_id: int):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{url_loyalty}{user_id}/") as resp:
            if resp.status == 200:
                return await resp.json()
            elif resp.status == 404:
                return None
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: {await resp.text()}")


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞
async def update_user_data(user_id: int, first_name: str, last_name: str, birth_date: str, email: str):
    payload = {
        "user_first_name": first_name,
        "user_last_name": last_name,
        "birth_date": birth_date,
        "email": email
    }
    async with aiohttp.ClientSession() as session:
        async with session.patch(f"{url_users}{user_id}/", json=payload) as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {await resp.text()}")


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
async def create_loyalty_card(user_id: int):
    payload = {
        "user_id": user_id
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url_loyalty, json=payload) as resp:
            if resp.status == 201:
                return await resp.json()
            elif resp.status == 400:
                text = await resp.text()
                if "—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞" in text.lower():
                    return None
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: {text}")
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: {await resp.text()}")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
@loyalty_router.message(F.text.lower() == "üí≥ –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
async def handle_loyalty_request(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.clear()

    # –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    card = await fetch_loyalty_card(user_id)

    if card:
        card_image_url = card.get("card_image")
        if card_image_url:
            async with aiohttp.ClientSession() as session:
                async with session.get(card_image_url) as img_resp:
                    if img_resp.status == 200:
                        img_bytes = await img_resp.read()
                        image = BufferedInputFile(img_bytes, filename="loyalty_card.png")
                        await message.answer_photo(photo=image)
                        return
        await message.answer("–ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

    # –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º FSM
    await state.set_state(LoyaltyCardForm.last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")


@loyalty_router.message(LoyaltyCardForm.last_name)
async def collect_last_name(message: Message, state: FSMContext):
    if not name_pattern.fullmatch(message.text.strip()):
        await message.answer("‚ö†Ô∏è –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(last_name=message.text.strip())
    await state.set_state(LoyaltyCardForm.first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")


@loyalty_router.message(LoyaltyCardForm.first_name)
async def collect_first_name(message: Message, state: FSMContext):
    if not name_pattern.fullmatch(message.text.strip()):
        await message.answer("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(first_name=message.text.strip())
    await state.set_state(LoyaltyCardForm.birth_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")


@loyalty_router.message(LoyaltyCardForm.birth_date)
async def collect_birth_date(message: Message, state: FSMContext):
    try:
        birth_date_obj = datetime.strptime(message.text, "%d.%m.%Y")
        birth_date_iso = birth_date_obj.date().isoformat()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return

    await state.update_data(birth_date=birth_date_iso)
    await state.set_state(LoyaltyCardForm.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")


@loyalty_router.message(LoyaltyCardForm.email)
async def collect_email_and_create(message: Message, state: FSMContext):
    if not email_pattern.fullmatch(message.text.strip()):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(email=message.text.strip())
    data = await state.get_data()
    user_id = message.from_user.id

    try:
        await update_user_data(
            user_id=user_id,
            first_name=data["first_name"],
            last_name=data["last_name"],
            birth_date=data["birth_date"],
            email=data["email"]
        )

        card = await create_loyalty_card(user_id)

        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø–æ–ª—É—á–∞–µ–º –µ—ë
        if card is None:
            card = await fetch_loyalty_card(user_id)

        card_image_url = card.get("card_image")
        if not card_image_url:
            await message.answer("–ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        async with aiohttp.ClientSession() as session:
            async with session.get(card_image_url) as img_resp:
                if img_resp.status == 200:
                    img_bytes = await img_resp.read()
                    image = BufferedInputFile(img_bytes, filename="loyalty_card.png")
                    await message.answer_photo(
                        photo=image,
                    )
                else:
                    await message.answer("–ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        error_text = str(e)
        if "DOCTYPE html" in error_text:
            short_message = "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ –ª–æ–≥–∏ Django!"
        elif len(error_text) > 3000:
            short_message = f"–û—à–∏–±–∫–∞: {error_text[:3000]}..."
        else:
            short_message = f"–û—à–∏–±–∫–∞: {error_text}"

        await message.answer(short_message, parse_mode=None)

    await state.clear()