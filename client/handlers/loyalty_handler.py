import logging
import re
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiohttp

from client.keyboards.reply import main_kb
from data.config import config_settings
from data.url import url_loyalty, url_users

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
name_pattern = re.compile(r"^[–ê-–Ø–∞-—èA-Za-z—ë–Å\-]{2,}$")
email_pattern = re.compile(r"^[\w\.-]+@[\w\.-]+\.\w{2,}$")
phone_pattern = re.compile(r"^\+?\d{10,15}$")

logger = logging.getLogger(__name__)

loyalty_router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class LoyaltyCardForm(StatesGroup):
    last_name = State()
    first_name = State()
    birth_date = State()
    phone_number = State()
    email = State()

# –ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã
async def fetch_loyalty_card(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.

    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ None, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.

    Raises:
        RuntimeError: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ.
    """
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    logger.info(f"Fetching loyalty card for user_id={user_id}")
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(f"{url_loyalty}{user_id}/", headers=headers) as resp:
                if resp.status == 200:
                    card_data = await resp.json()
                    logger.info(f"Loyalty card fetched for user_id={user_id}")
                    return card_data
                elif resp.status == 404:
                    logger.info(f"No loyalty card found for user_id={user_id}")
                    return None
                else:
                    text = await resp.text()
                    logger.error(f"Failed to fetch loyalty card for user_id={user_id}: status={resp.status}, response={text}")
                    return None
    except Exception as e:
        logger.exception(f"Exception while fetching loyalty card for user_id={user_id}: {str(e)}")
        return None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞
async def update_user_data(user_id: int, first_name: str, last_name: str, birth_date: str, phone_number: str,
                           email: str):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    """
    payload = {
        "user_first_name": first_name,
        "user_last_name": last_name,
        "birth_date": birth_date,
        "phone_number": phone_number,
        "email": email
    }
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    url = f"{url_users.rstrip('/')}/{user_id}/"
    logger.info(f"Updating user data for user_id={user_id} with payload={payload}, url={url}")

    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.patch(url, json=payload, headers=headers) as resp:
                response_text = await resp.text()
                if resp.status in [200, 201]:
                    logger.info(f"User data updated for user_id={user_id}, status={resp.status}")
                    return True
                else:
                    logger.error(
                        f"Failed to update user data for user_id={user_id}: status={resp.status}, response={response_text}")
                    return False
    except aiohttp.ClientError as e:
        logger.exception(f"Client error while updating user data for user_id={user_id}: {str(e)}")
        return False
    except Exception as e:
        logger.exception(f"Unexpected error while updating user data for user_id={user_id}: {str(e)}")
        return False


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
async def create_loyalty_card(user_id: int):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    """
    payload = {"user_id": user_id}
    headers = {"X-Bot-Api-Key": config_settings.BOT_API_KEY.get_secret_value()}
    logger.info(f"Creating loyalty card for user_id={user_id}")

    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.post(
                url=url_loyalty,
                json=payload,
                headers=headers
            ) as resp:
                text = await resp.text()
                if resp.status == 201:
                    card_data = await resp.json()
                    logger.info(f"Loyalty card created for user_id={user_id}, status={resp.status}")
                    return card_data
                elif resp.status == 400:
                    if "—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞" in text.lower():
                        logger.info(f"Loyalty card already exists for user_id={user_id}")
                        return None
                    logger.warning(f"Failed to create loyalty card for user_id={user_id}: {text}")
                    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É: {text}")
                else:
                    logger.error(f"Failed to create loyalty card for user_id={user_id}: status={resp.status}, response={text}")
                    raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ({resp.status}): {text}")
    except Exception as e:
        logger.exception(f"Exception while creating loyalty card for user_id={user_id}: {str(e)}")
        raise RuntimeError(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {str(e)}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
@loyalty_router.message(F.text == "üí≥ –ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
async def handle_loyalty_request(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç FSM –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞—Ä—Ç—ã.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º.

    Notes:
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç.
    """
    user_id = message.from_user.id
    await state.clear()
    try:
        card = await fetch_loyalty_card(user_id)
        if card:
            card_image_url = card.get("card_image")
            if card_image_url:
                async with aiohttp.ClientSession() as session:
                    async with session.get(card_image_url) as img_resp:
                        if img_resp.status == 200:
                            img_bytes = await img_resp.read()
                            image = BufferedInputFile(img_bytes, filename="loyalty_card.png")
                            logger.info(f"Sent loyalty card image for user_id={user_id}")
                            await message.answer_photo(photo=image, reply_markup=main_kb)
                            return
                        else:
                            logger.warning(f"Failed to fetch card image for user_id={user_id}, status={img_resp.status}")
            logger.warning(f"No card image available for user_id={user_id}")
            await message.answer(
                "–ö–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=main_kb
            )
            return
        logger.info(f"Starting FSM for loyalty card creation for user_id={user_id}")
        await state.set_state(LoyaltyCardForm.last_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=main_kb)
    except Exception as e:
        logger.exception(f"Error processing loyalty card request for user_id={user_id}: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=main_kb
        )

@loyalty_router.message(LoyaltyCardForm.last_name)
async def collect_last_name(message: Message, state: FSMContext):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–º–∏–ª–∏–µ–π.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    Notes:
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–º–∏–ª–∏–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ first_name.
    """
    if not name_pattern.fullmatch(message.text.strip()):
        await message.answer("‚ö†Ô∏è –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(last_name=message.text.strip())
    await state.set_state(LoyaltyCardForm.first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@loyalty_router.message(LoyaltyCardForm.first_name)
async def collect_first_name(message: Message, state: FSMContext):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    Notes:
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ birth_date.
    """
    if not name_pattern.fullmatch(message.text.strip()):
        await message.answer("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(first_name=message.text.strip())
    await state.set_state(LoyaltyCardForm.birth_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")

@loyalty_router.message(LoyaltyCardForm.birth_date)
async def collect_birth_date(message: Message, state: FSMContext):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    Notes:
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç (–î–î.–ú–ú.–ì–ì–ì–ì) –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ phone_number.
    """
    try:
        birth_date_obj = datetime.strptime(message.text, "%d.%m.%Y")
        birth_date_iso = birth_date_obj.date().isoformat()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return
    await state.update_data(birth_date=birth_date_iso)
    await state.set_state(LoyaltyCardForm.phone_number)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

@loyalty_router.message(LoyaltyCardForm.phone_number)
async def collect_phone_number(message: Message, state: FSMContext):
    """–°–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    Notes:
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º".
    """
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text.strip().replace(" ", "")
    if not phone_pattern.fullmatch(phone):
        await message.answer(
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10‚Äì15 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å '+'). –ü—Ä–∏–º–µ—Ä: +79001234567",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    await state.update_data(phone_number=phone)
    await state.set_state(LoyaltyCardForm.email)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=ReplyKeyboardRemove()
    )

@loyalty_router.message(LoyaltyCardForm.email)
async def collect_email_and_create(message: Message, state: FSMContext):
    """–°–æ–±–∏—Ä–∞–µ—Ç email –∏ —Å–æ–∑–¥–∞—ë—Ç –∫–∞—Ä—Ç—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å email.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    Notes:
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ API.
    """
    if not email_pattern.fullmatch(message.text.strip()):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(email=message.text.strip())
    data = await state.get_data()
    user_id = message.from_user.id
    logger.info(f"Collected data for loyalty card creation for user_id={user_id}: {data}")
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updated = await update_user_data(
            user_id=user_id,
            first_name=data["first_name"],
            last_name=data["last_name"],
            birth_date=data["birth_date"],
            phone_number=data["phone_number"],
            email=data["email"]
        )
        if not updated:
            logger.error(f"Failed to update user data for user_id={user_id}")
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=main_kb
            )
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        card = await create_loyalty_card(user_id)
        if card is None:
            card = await fetch_loyalty_card(user_id)
        if not card:
            logger.error(f"Failed to create or fetch loyalty card for user_id={user_id}")
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=main_kb
            )
            await state.clear()
            return

        card_image_url = card.get("card_image")
        if not card_image_url:
            logger.warning(f"No card image available for user_id={user_id}")
            await message.answer(
                "–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
                reply_markup=main_kb
            )
            await state.clear()
            return

        async with aiohttp.ClientSession() as session:
            async with session.get(card_image_url) as img_resp:
                if img_resp.status == 200:
                    img_bytes = await img_resp.read()
                    image = BufferedInputFile(img_bytes, filename="loyalty_card.png")
                    logger.info(f"Sent loyalty card image for user_id={user_id}")
                    await message.answer_photo(photo=image, reply_markup=main_kb)
                else:
                    logger.warning(f"Failed to load card image for user_id={user_id}: status={img_resp.status}")
                    await message.answer(
                        "–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                        reply_markup=main_kb
                    )
    except Exception as e:
        logger.exception(f"Error creating or loading loyalty card for user_id={user_id}: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=main_kb
        )
    finally:
        await state.clear()