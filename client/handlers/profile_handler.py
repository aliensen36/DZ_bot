import logging

from aiogram import Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F

from client.keyboards.inline import get_profile_inline_kb
from client.services.loyalty import fetch_loyalty_card
from client.services.user import update_user_data
from client.keyboards.reply import main_kb, edit_keyboard, edit_data_keyboard

logger = logging.getLogger(__name__)

profile_router = Router()

class EditUserData(StatesGroup):
    choosing_field = State()
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_birth_date = State()
    waiting_for_phone = State()
    waiting_for_email = State()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
@profile_router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def handle_profile(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç".

    Notes:
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π get_profile_inline_kb.
    """
    try:
        await message.answer(
            "üîê –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
            reply_markup=await get_profile_inline_kb()
        )
    except Exception as e:
        logging.error(f"Error handling profile request: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"
@profile_router.callback_query(F.data == "my_data")
async def my_data_handler(callback: CallbackQuery):
    user_id = callback.from_user.id

    card =  await fetch_loyalty_card(user_id)

    try:
        if not card:
            await callback.message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.")
            return
        
        user_data_message = (
            f"üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"ü™™ –ò–º—è: {card.get('user_first_name')}\n"
            f"üßæ –§–∞–º–∏–ª–∏—è: {card.get('user_last_name')}\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {card.get('birth_date')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {card.get('phone_number')}\n"
            f"üìß Email: {card.get('email')}\n\n"
        )

        await callback.message.answer(
            user_data_message,
            reply_markup=edit_keyboard,
        )

    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logging.debug(f"Ignored 'message not modified' for user {callback.from_user.id}")
        else:
            logging.error(f"TelegramBadRequest: {e}")
            raise

@profile_router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def show_edit_data_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=edit_data_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
@profile_router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è")
async def go_back_to_main_menu(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_kb)

@profile_router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def edit_first_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(EditUserData.waiting_for_first_name)

@profile_router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é")
async def edit_last_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(EditUserData.waiting_for_last_name)

@profile_router.message(F.text == "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
async def edit_birth_date(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(EditUserData.waiting_for_birth_date)

@profile_router.message(F.text == "üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def edit_phone(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(EditUserData.waiting_for_phone)

@profile_router.message(F.text == "üìß –ò–∑–º–µ–Ω–∏—Ç—å email")
async def edit_email(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
    await state.set_state(EditUserData.waiting_for_email)

@profile_router.message(EditUserData.waiting_for_first_name)
async def process_first_name(message: Message, state: FSMContext):
    await update_user_data(user_id=message.from_user.id, first_name=message.text, last_name=None, birth_date=None, phone_number=None, email=None)
    await message.answer("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

@profile_router.message(EditUserData.waiting_for_last_name)
async def process_last_name(message: Message, state: FSMContext):
    await update_user_data(user_id=message.from_user.id, first_name=None, last_name=message.text, birth_date=None, phone_number=None, email=None)
    await message.answer("‚úÖ –§–∞–º–∏–ª–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()

@profile_router.message(EditUserData.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    await update_user_data(user_id=message.from_user.id, first_name=None, last_name=None, birth_date=message.text, phone_number=None, email=None)
    await message.answer("‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()

@profile_router.message(EditUserData.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await update_user_data(user_id=message.from_user.id, first_name=None, last_name=None, birth_date=None, phone_number=message.text, email=None)
    await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()

@profile_router.message(EditUserData.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    await update_user_data(user_id=message.from_user.id, first_name=None, last_name=None, birth_date=None, phone_number=None, email=message.text)
    await message.answer("‚úÖ Email –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()

    
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@profile_router.callback_query(F.data == "my_subscriptions")
async def my_subscriptions_handler(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏".

    Notes:
        –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫.
    """
    try:
        user_data_message = (
            "üîî <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
            "üçï –ê–∫—Ü–∏–∏ –ü–∏—Ü—Ü–µ—Ä–∏–∏ ¬´–°—ã—Ä-—Ä-—Ä¬ª\n\n"
            "üéµ –ê—Ñ–∏—à–∞ ¬´–ì–ª–∞—Å—Ç–æ–Ω–±–µ—Ä—Ä–∏¬ª\n\n"
            "üìö –ù–æ–≤–æ—Å—Ç–∏ –ª–µ–∫—Ç–æ—Ä–∏—è ¬´–û–±—Å—É–¥–∏–º¬ª\n\n"
        )
        await callback.message.edit_text(
            user_data_message,
            reply_markup=await get_profile_inline_kb()
        )
        await callback.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logging.debug(f"Ignored 'message not modified' for user {callback.from_user.id}")
        else:
            logging.error(f"TelegramBadRequest: {e}")
            raise
    finally:
        await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –±–æ–Ω—É—Å—ã"
@profile_router.callback_query(F.data == "my_bonuses")
async def my_bonuses_handler(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –±–æ–Ω—É—Å—ã".

    Notes:
        –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –±–æ–Ω—É—Å–æ–≤.
    """
    try:
        user_data_message = (
            "üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã</b>\n\n"
            "‚òï <b>15% —Å–∫–∏–¥–∫–∞</b> –Ω–∞ –∫–æ—Ñ–µ –≤ ¬´–ö–æ—Ñ–µ–∏–Ω¬ª\n"
            "(–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ 31.12.2025)\n\n"
            "üí™ <b>1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ</b> —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞ ¬´–ñ–º–∏¬ª\n"
            "(–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ 15.11.2025)\n\n"
        )
        await callback.message.edit_text(
            user_data_message,
            reply_markup=await get_profile_inline_kb()
        )
        await callback.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logging.debug(f"Ignored 'message not modified' for user {callback.from_user.id}")
        else:
            logging.error(f"TelegramBadRequest: {e}")
            raise
    finally:
        await callback.answer()
